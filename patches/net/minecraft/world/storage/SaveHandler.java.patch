--- ../src-base/minecraft/net/minecraft/world/storage/SaveHandler.java
+++ ../src-work/minecraft/net/minecraft/world/storage/SaveHandler.java
@@ -6,8 +6,11 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
@@ -19,6 +22,11 @@
 import net.minecraft.world.gen.structure.template.TemplateManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.plugin.PluginLoadOrder;
+import red.mohist.forge.ForgeInjectBukkit;
 
 public class SaveHandler implements ISaveHandler, IPlayerFileData
 {
@@ -31,6 +39,9 @@
     private final TemplateManager structureTemplateManager;
     protected final DataFixer dataFixer;
 
+    private UUID uuid = null; // CraftBukkit
+    private static boolean initializedBukkit = false; // Cauldron
+
     public SaveHandler(File p_i46648_1_, String saveDirectoryNameIn, boolean p_i46648_3_, DataFixer dataFixerIn)
     {
         this.dataFixer = dataFixerIn;
@@ -116,10 +127,9 @@
     public WorldInfo loadWorldInfo()
     {
         File file1 = new File(this.worldDirectory, "level.dat");
-
         if (file1.exists())
         {
-            WorldInfo worldinfo = SaveFormatOld.getWorldData(file1, this.dataFixer);
+            WorldInfo worldinfo = SaveFormatOld.loadAndFix(file1, this.dataFixer, this);
 
             if (worldinfo != null)
             {
@@ -127,8 +137,9 @@
             }
         }
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().confirmBackupLevelDatUse(this);
         file1 = new File(this.worldDirectory, "level.dat_old");
-        return file1.exists() ? SaveFormatOld.getWorldData(file1, this.dataFixer) : null;
+        return file1.exists() ? SaveFormatOld.loadAndFix(file1, this.dataFixer, this) : null;
     }
 
     public void saveWorldInfoWithPlayer(WorldInfo worldInformation, @Nullable NBTTagCompound tagCompound)
@@ -137,6 +148,8 @@
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
         nbttagcompound1.setTag("Data", nbttagcompound);
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().handleWorldDataSave(this, worldInformation, nbttagcompound1);
+
         try
         {
             File file1 = new File(this.worldDirectory, "level.dat_new");
@@ -189,6 +202,7 @@
             }
 
             file1.renameTo(file2);
+            net.minecraftforge.event.ForgeEventFactory.firePlayerSavingEvent(player, this.playersDirectory, player.getUniqueID().toString());
         }
         catch (Exception var5)
         {
@@ -217,12 +231,39 @@
 
         if (nbttagcompound != null)
         {
+            // CraftBukkit start
+            if (player instanceof EntityPlayerMP) {
+                CraftPlayer playerCB = (CraftPlayer) player.getBukkitEntity();
+                // Only update first played if it is older than the one we have
+                long modified = new File(this.playersDirectory, player.getUniqueID().toString() + ".dat").lastModified();
+                if (modified < playerCB.getFirstPlayed()) {
+                    playerCB.setFirstPlayed(modified);
+                }
+            }
+            // CraftBukkit end
             player.readFromNBT(this.dataFixer.process(FixTypes.PLAYER, nbttagcompound));
         }
 
+        net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(player, playersDirectory, player.getUniqueID().toString());
         return nbttagcompound;
     }
 
+    // CraftBukkit start
+    public NBTTagCompound getPlayerData(String s) {
+        try {
+            File file1 = new File(this.playersDirectory, s + ".dat");
+
+            if (file1.exists()) {
+                return CompressedStreamTools.readCompressed((InputStream) (new FileInputStream(file1)));
+            }
+        } catch (Exception exception) {
+            LOGGER.warn("Failed to load player data for " + s);
+        }
+
+        return null;
+    }
+    // CraftBukkit end
+
     public IPlayerFileData getPlayerNBTManager()
     {
         return this;
@@ -261,4 +302,79 @@
     {
         return this.structureTemplateManager;
     }
+
+    public NBTTagCompound getPlayerNBT(EntityPlayerMP player)
+    {
+        try
+        {
+            File file1 = new File(this.playersDirectory, player.getUniqueID().toString() + ".dat");
+
+            if (file1.exists() && file1.isFile())
+            {
+                return CompressedStreamTools.readCompressed(new FileInputStream(file1));
+            }
+        }
+        catch (Exception exception)
+        {
+            LOGGER.warn("Failed to load player data for " + player.getName());
+        }
+        return null;
+    }
+
+    // CraftBukkit start
+    public UUID getUUID() {
+        if (uuid != null) return uuid;
+        File file1 = new File(this.worldDirectory, "uid.dat");
+        if (file1.exists()) {
+            DataInputStream dis = null;
+            try {
+                dis = new DataInputStream(new FileInputStream(file1));
+                return uuid = new UUID(dis.readLong(), dis.readLong());
+            } catch (IOException ex) {
+                LOGGER.warn("Failed to read " + file1 + ", generating new random UUID", ex);
+            } finally {
+                if (dis != null) {
+                    try {
+                        dis.close();
+                    } catch (IOException ex) {
+                        // NOOP
+                    }
+                }
+            }
+        }
+        uuid = UUID.randomUUID();
+        DataOutputStream dos = null;
+        try {
+            dos = new DataOutputStream(new FileOutputStream(file1));
+            dos.writeLong(uuid.getMostSignificantBits());
+            dos.writeLong(uuid.getLeastSignificantBits());
+        } catch (IOException ex) {
+            LOGGER.warn("Failed to write " + file1, ex);
+        } finally {
+            if (dos != null) {
+                try {
+                    dos.close();
+                } catch (IOException ex) {
+                    // NOOP
+                }
+            }
+        }
+        return uuid;
+    }
+
+    public File getPlayerDir() {
+        return playersDirectory;
+    }
+    // CraftBukkit end
+
+    // Mohist start
+    public static void initBukkitData() {
+        // inject bukkit materials before plugins load
+        if (!initializedBukkit)
+        {
+            ForgeInjectBukkit.init();
+            initializedBukkit = true;
+        }
+    }
+    // Mohist end
 }
