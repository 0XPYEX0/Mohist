--- ../src-base/minecraft/net/minecraft/world/World.java
+++ ../src-work/minecraft/net/minecraft/world/World.java
@@ -6,18 +6,17 @@
 import com.google.common.collect.Lists;
 import java.util.Calendar;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
-import java.util.function.Supplier;
-
 import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockLiquid;
-import net.minecraft.block.BlockObserver;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
@@ -25,12 +24,23 @@
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityXPOrb;
+import net.minecraft.entity.monster.EntityGhast;
+import net.minecraft.entity.monster.EntityGolem;
+import net.minecraft.entity.monster.EntityMob;
+import net.minecraft.entity.monster.EntitySlime;
+import net.minecraft.entity.passive.EntityAnimal;
+import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Biomes;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.Packet;
+import net.minecraft.network.play.server.SPacketWorldBorder;
 import net.minecraft.pathfinding.PathWorldListener;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.scoreboard.Scoreboard;
@@ -52,17 +62,36 @@
 import net.minecraft.village.VillageCollection;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeProvider;
+import net.minecraft.world.border.IBorderListener;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraft.world.gen.structure.StructureBoundingBox;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.WorldSavedData;
 import net.minecraft.world.storage.loot.LootTableManager;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_12_R1.SpigotTimings;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_12_R1.util.CraftMagicNumbers;
+import org.bukkit.entity.NPC;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.generator.ChunkGenerator;
+import red.mohist.Mohist;
+import red.mohist.common.RealTimeTicking;
+import red.mohist.common.cache.WorldCache;
+import red.mohist.configuration.MohistConfig;
+import red.mohist.configuration.TileEntityWorldConfig;
 
 public abstract class World implements IBlockAccess, net.minecraftforge.common.capabilities.ICapabilityProvider
 {
@@ -94,24 +123,24 @@
     public float thunderingStrength;
     private int lastLightningBolt;
     public final Random rand = new Random();
-    public final WorldProvider provider;
+    public WorldProvider provider;
     protected PathWorldListener pathListener = new PathWorldListener();
     protected List<IWorldEventListener> eventListeners;
-    protected IChunkProvider chunkProvider;
+    public IChunkProvider chunkProvider;
     protected final ISaveHandler saveHandler;
-    protected WorldInfo worldInfo;
+    public WorldInfo worldInfo;
     protected boolean findingSpawnPoint;
-    protected MapStorage mapStorage;
+    public MapStorage mapStorage;
     public VillageCollection villageCollection;
     protected LootTableManager lootTable;
     protected AdvancementManager advancementManager;
     protected FunctionManager functionManager;
     public final Profiler profiler;
     private final Calendar calendar;
-    protected Scoreboard worldScoreboard;
+    public Scoreboard worldScoreboard;
     public final boolean isRemote;
-    protected boolean spawnHostileMobs;
-    protected boolean spawnPeacefulMobs;
+    public boolean spawnHostileMobs;
+    public boolean spawnPeacefulMobs;
     private boolean processingLoadedTiles;
     private final WorldBorder worldBorder;
     int[] lightUpdateBlockList;
@@ -122,8 +151,114 @@
     private net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities;
     private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
 
+    private final CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public ChunkGenerator generator;
+    public boolean captureTreeGeneration = false;
+    public List<EntityItem> captureDrops;
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public boolean populating;
+    private int tickPosition;
+    public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+	public final SpigotTimings.WorldTimingsHandler timings; // Spigot
+    public static boolean haveWeSilencedAPhysicsCrash;
+    public static String blockLocation;
+    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
+
+    public TileEntityWorldConfig tileentityConfig;
+
+    public CraftWorld getWorld() {
+        return this.world;
+    }
+
+    public CraftServer getServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
+
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
+    }
+
+    protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client, ChunkGenerator gen, org.bukkit.World.Environment env) {
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig( info.getWorldName() ); // Spigot
+        this.generator = gen;
+        this.world = new CraftWorld((WorldServer) this, gen, env);
+        this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
+        this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        // CraftBukkit end
+        this.eventListeners = Lists.newArrayList(this.pathListener);
+        this.calendar = Calendar.getInstance();
+        this.worldScoreboard = new Scoreboard();
+        this.spawnHostileMobs = true;
+        this.spawnPeacefulMobs = true;
+        this.lightUpdateBlockList = new int[32768];
+        this.saveHandler = saveHandlerIn;
+        this.profiler = profilerIn;
+        this.worldInfo = info;
+        this.provider = providerIn;
+        this.isRemote = client;
+        this.worldBorder = providerIn.createWorldBorder();
+        perWorldStorage = new MapStorage((ISaveHandler)null);
+        // Mohist start
+        this.tileentityConfig = new TileEntityWorldConfig(info.getWorldName(), MinecraftServer.tileEntityConfig);
+        if(this.worldInfo != null) // Use saved dimension from level.dat. Fixes issues with MultiVerse
+        {
+            if (this.worldInfo.getDimension() != 0)
+                this.provider.setDimension(this.worldInfo.getDimension());
+            else
+            {
+                this.worldInfo.setDimension(this.provider.getDimension());
+            }
+        }
+
+        if (this.worldInfo.getDimension() == 0)
+        {
+            generator = this.getServer().getGenerator(this.worldInfo.getWorldName());
+			getWorld().generator = generator;
+        }
+        // Mohist end
+        // CraftBukkit start
+        getWorldBorder().world = (WorldServer) this;
+        // From PlayerList.setPlayerFileData
+        getWorldBorder().addListener(new IBorderListener() {
+            public void onSizeChanged(WorldBorder worldborder, double d0) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_SIZE), worldborder.world);
+            }
+
+            public void onTransitionStarted(WorldBorder worldborder, double d0, double d1, long i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.LERP_SIZE), worldborder.world);
+            }
+
+            public void onCenterChanged(WorldBorder worldborder, double d0, double d1) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_CENTER), worldborder.world);
+            }
+
+            public void onWarningTimeChanged(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_WARNING_TIME), worldborder.world);
+            }
+
+            public void onWarningDistanceChanged(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_WARNING_BLOCKS), worldborder.world);
+            }
+
+            public void onDamageAmountChanged(WorldBorder worldborder, double d0) {}
+
+            public void onDamageBufferChanged(WorldBorder worldborder, double d0) {}
+        });
+        this.getServer().addWorld(this.world);
+        // CraftBukkit end
+        this.keepSpawnInMemory = MohistConfig.instance.keepSpawnInMemory.getValue(); // Paper
+        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+    }
+
+
     protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client)
     {
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig( info.getWorldName() ); // Spigot
+        this.tileentityConfig = new TileEntityWorldConfig(info.getWorldName(), MinecraftServer.tileEntityConfig);
+        this.world = DimensionManager.getWorld(0) != null ? DimensionManager.getWorld(0).getWorld() : null;
         this.eventListeners = Lists.newArrayList(this.pathListener);
         this.calendar = Calendar.getInstance();
         this.worldScoreboard = new Scoreboard();
@@ -137,6 +272,7 @@
         this.isRemote = client;
         this.worldBorder = providerIn.createWorldBorder();
         perWorldStorage = new MapStorage((ISaveHandler)null);
+        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
     }
 
     public World init()
@@ -298,7 +434,7 @@
         }
     }
 
-    protected abstract boolean isChunkLoaded(int x, int z, boolean allowEmpty);
+    public abstract boolean isChunkLoaded(int x, int z, boolean allowEmpty);
 
     public Chunk getChunkFromBlockCoords(BlockPos pos)
     {
@@ -317,6 +453,26 @@
 
     public boolean setBlockState(BlockPos pos, IBlockState newState, int flags)
     {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            net.minecraftforge.common.util.BlockSnapshot blocksnapshot = null;
+
+            for (net.minecraftforge.common.util.BlockSnapshot previous : this.capturedBlockSnapshots)
+            {
+                if (previous.getPos().equals(pos))
+                {
+                    blocksnapshot = previous;
+                    break;
+                }
+            }
+            if (blocksnapshot != null)
+            {
+                this.capturedBlockSnapshots.remove(blocksnapshot);
+            }
+            this.capturedBlockSnapshots.add(new net.minecraftforge.common.util.BlockSnapshot(this, pos, newState, flags));
+            return true;
+        }
+        // CraftBukkit end
         if (this.isOutsideBuildHeight(pos))
         {
             return false;
@@ -437,6 +593,11 @@
     {
         if (this.worldInfo.getTerrainType() != WorldType.DEBUG_ALL_BLOCK_STATES)
         {
+ 			// CraftBukkit start
+            if (populating) {
+                return;
+            }
+			// CraftBukkit end
             this.notifyNeighborsOfStateChange(pos, blockType, p_175722_3_);
         }
     }
@@ -488,7 +649,6 @@
     {
         if(net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), java.util.EnumSet.allOf(EnumFacing.class), updateObservers).isCanceled())
             return;
-
         this.neighborChanged(pos.west(), blockType, pos);
         this.neighborChanged(pos.east(), blockType, pos);
         this.neighborChanged(pos.down(), blockType, pos);
@@ -548,6 +708,15 @@
 
             try
             {
+                CraftWorld world = ((WorldServer) this).getWorld();
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()), CraftMagicNumbers.getId(blockIn));
+                    this.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
                 iblockstate.neighborChanged(this, pos, blockIn, fromPos);
             }
             catch (Throwable throwable)
@@ -586,6 +755,11 @@
                 {
                     iblockstate.getBlock().observedNeighborChange(iblockstate, this, pos, p_190529_2_, p_190529_3_);
                 }
+                catch (StackOverflowError stackoverflowerror) { // Spigot Start
+                    haveWeSilencedAPhysicsCrash = true;
+                    blockLocation = pos.getX() + ", " + pos.getY() + ", " + pos.getZ();
+                    // Spigot End
+                }
                 catch (Throwable throwable)
                 {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Exception while updating neighbours");
@@ -596,7 +770,7 @@
                         {
                             try
                             {
-                                return String.format("ID #%d (%s // %s // %s)", Block.getIdFromBlock(p_190529_2_), p_190529_2_.getUnlocalizedName(), p_190529_2_.getClass().getName(), p_190529_2_.getRegistryName());
+                                return String.format("ID #%d (%s // %s)", Block.getIdFromBlock(p_190529_2_), p_190529_2_.getUnlocalizedName(), p_190529_2_.getClass().getCanonicalName());
                             }
                             catch (Throwable var2)
                             {
@@ -664,7 +838,6 @@
             {
                 pos = new BlockPos(pos.getX(), 255, pos.getZ());
             }
-
             return this.getChunkFromBlockCoords(pos).getLightSubtracted(pos, 0);
         }
     }
@@ -793,7 +966,7 @@
             }
 
             if (!this.isValid(pos))
-            {
+			{
                 return type.defaultLightValue;
             }
             else if (!this.isBlockLoaded(pos))
@@ -846,7 +1019,7 @@
         }
 
         if (!this.isValid(pos))
-        {
+		{
             return type.defaultLightValue;
         }
         else if (!this.isBlockLoaded(pos))
@@ -863,7 +1036,7 @@
     public void setLightFor(EnumSkyBlock type, BlockPos pos, int lightValue)
     {
         if (this.isValid(pos))
-        {
+		{
             if (this.isBlockLoaded(pos))
             {
                 Chunk chunk = this.getChunkFromBlockCoords(pos);
@@ -902,6 +1075,17 @@
 
     public IBlockState getBlockState(BlockPos pos)
     {
+		// CraftBukkit start - tree generation
+        if (captureTreeGeneration)
+		{
+            for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : this.capturedBlockSnapshots)
+            {
+                if (blocksnapshot.getPos().equals(pos)) { 
+                    return blocksnapshot.getReplacedBlock();
+				}
+            }
+        }
+        // CraftBukkit end
         if (this.isOutsideBuildHeight(pos))
         {
             return Blocks.AIR.getDefaultState();
@@ -1181,6 +1365,56 @@
 
     public boolean spawnEntity(Entity entityIn)
     {
+        if (entityIn == null) return false;
+        org.bukkit.event.Cancellable event = null;
+        CreatureSpawnEvent.SpawnReason spawnReason = CreatureSpawnEvent.SpawnReason.DEFAULT;
+        if (entityIn instanceof EntityLivingBase && !(entityIn instanceof EntityPlayerMP)) {
+            boolean isAnimal = entityIn instanceof EntityAnimal || entityIn instanceof EntityWaterMob || entityIn instanceof EntityGolem
+                    || entityIn.isCreatureType(EnumCreatureType.CREATURE, false);
+            boolean isMonster = entityIn instanceof EntityMob || entityIn instanceof EntityGhast || entityIn instanceof EntitySlime
+                    || entityIn.isCreatureType(EnumCreatureType.MONSTER, false);
+            boolean isNpc = entityIn instanceof NPC;
+
+            if (spawnReason != CreatureSpawnEvent.SpawnReason.CUSTOM) {
+                if (isAnimal && !spawnPeacefulMobs || isMonster && !spawnHostileMobs || isNpc && !getServer().getServer().getCanSpawnNPCs()) {
+                    entityIn.isDead = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLivingBase) entityIn, spawnReason);
+        } else if (entityIn instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) entityIn);
+        } else if (entityIn.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(entityIn);
+        } else if (entityIn.getBukkitEntity() instanceof org.bukkit.entity.Vehicle){
+            event = CraftEventFactory.callVehicleCreateEvent(entityIn);
+        }
+
+        // Spigot start
+        else if (entityIn instanceof EntityXPOrb) {
+            EntityXPOrb xp = (EntityXPOrb) entityIn;
+            double radius = spigotConfig.expMerge;
+            if (radius > 0) {
+                List<Entity> entities = this.getEntitiesWithinAABBExcludingEntity(entityIn, entityIn.getEntityBoundingBox().grow(radius, radius, radius));
+                for (Entity e : entities) {
+                    if (e instanceof EntityXPOrb) {
+                        EntityXPOrb loopItem = (EntityXPOrb) e;
+                        if (!loopItem.isDead) {
+                            xp.xpValue += loopItem.xpValue;
+                            loopItem.setDead();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
+
+        if (event != null && (event.isCancelled() || entityIn.isDead)) {
+            entityIn.isDead = true;
+            return false;
+        }
+        // CraftBukkit end
         // do not drop any items while restoring blocksnapshots. Prevents dupes
         if (!this.isRemote && (entityIn == null || (entityIn instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
 
@@ -1209,28 +1443,128 @@
             if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this)) && !flag) return false;
 
             this.getChunkFromChunkCoords(i, j).addEntity(entityIn);
+            if (entityIn.isDead) return false; // Paper - don't add dead entities, chunk registration may of killed it
             this.loadedEntityList.add(entityIn);
             this.onEntityAdded(entityIn);
             return true;
         }
     }
 
+    public boolean addEntity(Entity entity, CreatureSpawnEvent.SpawnReason spawnReason) {
+        if (entity == null) return false;
+        org.bukkit.event.Cancellable event = null;
+        // Cauldron start - workaround for handling CraftBukkit's SpawnReason with customspawners and block spawners
+        if (entity.spawnReason != null && entity.spawnReason.equals("natural"))
+        {
+            spawnReason = CreatureSpawnEvent.SpawnReason.NATURAL;
+        }
+        else if (entity.spawnReason != null && entity.spawnReason.equals("spawner"))
+        {
+            spawnReason = CreatureSpawnEvent.SpawnReason.SPAWNER;
+        }
+        // Cauldron end
+        if (entity instanceof EntityLivingBase && !(entity instanceof EntityPlayerMP)) {
+            boolean isAnimal = entity instanceof EntityAnimal || entity instanceof EntityWaterMob || entity instanceof EntityGolem
+                    || entity.isCreatureType(EnumCreatureType.CREATURE, false);
+            boolean isMonster = entity instanceof EntityMob || entity instanceof EntityGhast || entity instanceof EntitySlime
+                    || entity.isCreatureType(EnumCreatureType.MONSTER, false);
+            boolean isNpc = entity instanceof NPC;
+
+            if (spawnReason != CreatureSpawnEvent.SpawnReason.CUSTOM) {
+                if (isAnimal && !spawnPeacefulMobs || isMonster && !spawnHostileMobs || isNpc && !getServer().getServer().getCanSpawnNPCs()) {
+                    entity.isDead = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLivingBase) entity, spawnReason);
+        } else if (entity instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) entity);
+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(entity);
+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Vehicle){
+            event = CraftEventFactory.callVehicleCreateEvent(entity);
+        }
+
+        // Spigot start
+        else if (entity instanceof EntityXPOrb) {
+            EntityXPOrb xp = (EntityXPOrb) entity;
+            double radius = spigotConfig.expMerge;
+            if (radius > 0) {
+                List<Entity> entities = this.getEntitiesWithinAABBExcludingEntity(entity, entity.getEntityBoundingBox().grow(radius, radius, radius));
+                for (Entity e : entities) {
+                    if (e instanceof EntityXPOrb) {
+                        EntityXPOrb loopItem = (EntityXPOrb) e;
+                        if (!loopItem.isDead) {
+                            xp.xpValue += loopItem.xpValue;
+                            loopItem.setDead();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
+
+        if (event != null && (event.isCancelled() || entity.isDead)) {
+            entity.isDead = true;
+            return false;
+        }
+        // CraftBukkit end
+        // do not drop any items while restoring blocksnapshots. Prevents dupes
+        if (!this.isRemote && (entity == null || (entity instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
+
+        int i = MathHelper.floor(entity.posX / 16.0D);
+        int j = MathHelper.floor(entity.posZ / 16.0D);
+        boolean flag = entity.forceSpawn;
+
+        if (entity instanceof EntityPlayer)
+        {
+            flag = true;
+        }
+
+        if (!flag && !this.isChunkLoaded(i, j, false))
+        {
+            return false;
+        }
+        else
+        {
+            if (entity instanceof EntityPlayer)
+            {
+                EntityPlayer entityplayer = (EntityPlayer)entity;
+                this.playerEntities.add(entityplayer);
+                this.updateAllPlayersSleepingFlag();
+            }
+
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this)) && !flag) return false;
+
+            this.getChunkFromChunkCoords(i, j).addEntity(entity);
+            if (entity.isDead) return false; // Paper - don't add dead entities, chunk registration may of killed it
+            this.loadedEntityList.add(entity);
+            this.onEntityAdded(entity);
+            return true;
+        }
+    }
+
     public void onEntityAdded(Entity entityIn)
     {
         for (int i = 0; i < this.eventListeners.size(); ++i)
         {
-            ((IWorldEventListener)this.eventListeners.get(i)).onEntityAdded(entityIn);
+           ((IWorldEventListener)this.eventListeners.get(i)).onEntityAdded(entityIn);
         }
         entityIn.onAddedToWorld();
+        entityIn.valid = true; // CraftBukkit
+        new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entityIn.getBukkitEntity()).callEvent(); // Paper - fire while valid
     }
 
     public void onEntityRemoved(Entity entityIn)
     {
         for (int i = 0; i < this.eventListeners.size(); ++i)
         {
-            ((IWorldEventListener)this.eventListeners.get(i)).onEntityRemoved(entityIn);
+            ((IWorldEventListener) this.eventListeners.get(i)).onEntityRemoved(entityIn);
         }
         entityIn.onRemovedFromWorld();
+        new com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent(entityIn.getBukkitEntity()).callEvent(); // Paper - fire while valid
+        entityIn.valid = false; // CraftBukkit
     }
 
     public void removeEntity(Entity entityIn)
@@ -1256,12 +1590,12 @@
     }
 
     public void removeEntityDangerously(Entity entityIn)
-    {
+	{
         entityIn.setDropItemsWhenDead(false);
         entityIn.setDead();
 
         if (entityIn instanceof EntityPlayer)
-        {
+		{
             this.playerEntities.remove(entityIn);
             this.updateAllPlayersSleepingFlag();
         }
@@ -1273,8 +1607,15 @@
         {
             this.getChunkFromChunkCoords(i, j).removeEntity(entityIn);
         }
-
-        this.loadedEntityList.remove(entityIn);
+        // CraftBukkit start - Decrement loop variable field if we've already ticked this entity
+        int index = this.loadedEntityList.indexOf(entityIn);
+        if (index != -1) {
+            if (index <= this.tickPosition) {
+                this.tickPosition--;
+            }
+            this.loadedEntityList.remove(index);
+        }
+        // CraftBukkit end
         this.onEntityRemoved(entityIn);
     }
 
@@ -1361,6 +1702,11 @@
 
     public List<AxisAlignedBB> getCollisionBoxes(@Nullable Entity entityIn, AxisAlignedBB aabb)
     {
+        // From performant and uses GPL-3.0 LICENSE
+        List<AxisAlignedBB> rs = WorldCache.bbCache.get(aabb);
+        if (rs != null) {
+            return rs;
+        }
         List<AxisAlignedBB> list = Lists.<AxisAlignedBB>newArrayList();
         this.getCollisionBoxes(entityIn, aabb, false, list);
 
@@ -1391,6 +1737,8 @@
             }
         }
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.GetCollisionBoxesEvent(this, entityIn, aabb, list));
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.bbCache.put(aabb, list);
         return list;
     }
 
@@ -1677,7 +2025,11 @@
         for (int i = 0; i < this.weatherEffects.size(); ++i)
         {
             Entity entity = this.weatherEffects.get(i);
-
+            // CraftBukkit start - Fixed an NPE
+            if (entity == null) {
+                continue;
+            }
+            // CraftBukkit end
             try
             {
                 if(entity.updateBlocked) continue;
@@ -1737,6 +2089,8 @@
         this.tickPlayers();
         this.profiler.endStartSection("regular");
 
+        org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+		timings.entityTick.startTiming(); // Spigot
         for (int i1 = 0; i1 < this.loadedEntityList.size(); ++i1)
         {
             Entity entity2 = this.loadedEntityList.get(i1);
@@ -1758,9 +2112,11 @@
             {
                 try
                 {
+					SpigotTimings.tickEntityTimer.startTiming(); // Spigot
                     net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(entity2);
                     this.updateEntity(entity2);
                     net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(entity2);
+					SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
                 }
                 catch (Throwable throwable1)
                 {
@@ -1797,7 +2153,9 @@
             this.profiler.endSection();
         }
 
+        timings.entityTick.stopTiming(); // Spigot
         this.profiler.endStartSection("blockEntities");
+        timings.tileEntityTick.startTiming(); // Spigot
 
         this.processingLoadedTiles = true; //FML Move above remove to prevent CMEs
 
@@ -1821,7 +2179,12 @@
         while (iterator.hasNext())
         {
             TileEntity tileentity = iterator.next();
-
+            // Spigot start
+            if (tileentity == null) {
+                iterator.remove();
+                continue;
+            }
+            // Spigot end
             if (!tileentity.isInvalid() && tileentity.hasWorld())
             {
                 BlockPos blockpos = tileentity.getPos();
@@ -1834,8 +2197,13 @@
                         {
                             return String.valueOf((Object)TileEntity.getKey(tileentity.getClass()));
                         });
+                        tileentity.tickTimer.startTiming(); // Spigot
                         net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(tileentity);
-                        ((ITickable)tileentity).update();
+
+                        if (red.mohist.util.TileEntity.canTileEntityTick(tileentity, this)) {
+                            ((ITickable)tileentity).update();
+                        }
+
                         net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(tileentity);
                         this.profiler.endSection();
                     }
@@ -1853,6 +2221,12 @@
                         else
                         throw new ReportedException(crashreport2);
                     }
+                    // Spigot start
+                    finally {
+                        tileentity.tickTimer.stopTiming();
+                    }
+                    // Spigot end
+
                 }
             }
 
@@ -1871,6 +2245,8 @@
             }
         }
 
+        timings.tileEntityTick.stopTiming(); // Spigot
+        timings.tileEntityPending.startTiming(); // Spigot
         this.processingLoadedTiles = false;
         this.profiler.endStartSection("pendingBlockEntities");
 
@@ -1882,10 +2258,12 @@
 
                 if (!tileentity1.isInvalid())
                 {
+                    /* CraftBukkit start - Order matters, moved down
                     if (!this.loadedTileEntityList.contains(tileentity1))
                     {
                         this.addTileEntity(tileentity1);
                     }
+                    // CraftBukkit end */
 
                     if (this.isBlockLoaded(tileentity1.getPos()))
                     {
@@ -1893,6 +2271,12 @@
                         IBlockState iblockstate = chunk.getBlockState(tileentity1.getPos());
                         chunk.addTileEntity(tileentity1.getPos(), tileentity1);
                         this.notifyBlockUpdate(tileentity1.getPos(), iblockstate, iblockstate, 3);
+                        // CraftBukkit start
+                        // From above, don't screw this up - SPIGOT-1746
+                        if (!this.loadedTileEntityList.contains(tileentity1)) {
+                            this.addTileEntity(tileentity1);
+                        }
+                        // CraftBukkit end
                     }
                 }
             }
@@ -1900,6 +2284,7 @@
             this.addedTileEntityList.clear();
         }
 
+        timings.tileEntityPending.stopTiming(); // Spigot
         this.profiler.endSection();
         this.profiler.endSection();
     }
@@ -1918,7 +2303,7 @@
         boolean flag = this.loadedTileEntityList.add(tile);
 
         if (flag && tile instanceof ITickable)
-        {
+		{
             this.tickableTileEntities.add(tile);
         }
         tile.onLoad();
@@ -1960,6 +2345,9 @@
 
     public void updateEntityWithOptionalForce(Entity entityIn, boolean forceUpdate)
     {
+        if (entityIn.isDead) {
+            return;
+        }
         if (!(entityIn instanceof EntityPlayer))
         {
             int j2 = MathHelper.floor(entityIn.posX);
@@ -1974,7 +2362,15 @@
             {
                 return;
             }
+		}
+
+        // Spigot start
+        if (forceUpdate && !org.spigotmc.ActivationRange.checkIfActive(entityIn)) {
+        	entityIn.ticksExisted++;
+        	entityIn.inactiveTick();
+        	return;
         }
+        // Spigot end
 
         entityIn.lastTickPosX = entityIn.posX;
         entityIn.lastTickPosY = entityIn.posY;
@@ -1994,6 +2390,7 @@
             {
                 if(!entityIn.updateBlocked)
                 entityIn.onUpdate();
+                entityIn.postTick();
             }
         }
 
@@ -2385,25 +2782,25 @@
     public TileEntity getTileEntity(BlockPos pos)
     {
         if (this.isOutsideBuildHeight(pos))
-        {
+		{
             return null;
         }
-        else
-        {
+		else
+		{
             TileEntity tileentity2 = null;
 
             if (this.processingLoadedTiles)
-            {
+			{
                 tileentity2 = this.getPendingTileEntityAt(pos);
             }
 
             if (tileentity2 == null)
-            {
+			{
                 tileentity2 = this.getChunkFromBlockCoords(pos).getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
             }
 
             if (tileentity2 == null)
-            {
+			{
                 tileentity2 = this.getPendingTileEntityAt(pos);
             }
 
@@ -2418,7 +2815,7 @@
         {
             TileEntity tileentity2 = this.addedTileEntityList.get(j2);
 
-            if (!tileentity2.isInvalid() && tileentity2.getPos().equals(pos))
+            if (tileentity2 != null && !tileentity2.isInvalid() && tileentity2.getPos().equals(pos))
             {
                 return tileentity2;
             }
@@ -2431,7 +2828,7 @@
     {
         pos = pos.toImmutable(); // Forge - prevent mutable BlockPos leaks
         if (!this.isOutsideBuildHeight(pos))
-        {
+		{
             if (tileEntityIn != null && !tileEntityIn.isInvalid())
             {
                 if (this.processingLoadedTiles)
@@ -2454,6 +2851,7 @@
                     }
 
                     toInvalidate.forEach(TileEntity::invalidate);
+                    tileEntityIn.setWorld(this); // Spigot - No null worlds
                     this.addedTileEntityList.add(tileEntityIn);
                 }
                 else
@@ -2505,7 +2903,7 @@
     public boolean isBlockNormalCube(BlockPos pos, boolean _default)
     {
         if (this.isOutsideBuildHeight(pos))
-        {
+		{
             return false;
         }
         else
@@ -2662,6 +3060,11 @@
                 }
 
                 this.rainingStrength = MathHelper.clamp(this.rainingStrength, 0.0F, 1.0F);
+                for (int idx = 0; idx < this.playerEntities.size(); ++idx) {
+                    if (((EntityPlayerMP) this.playerEntities.get(idx)).world == this) {
+                        ((EntityPlayerMP) this.playerEntities.get(idx)).tickWeather();
+                    }
+                }
             }
         }
     }
@@ -2851,8 +3254,11 @@
 
     public boolean checkLightFor(EnumSkyBlock lightType, BlockPos pos)
     {
-        if (!this.isAreaLoaded(pos, 16, false))
+        // CraftBukkit start - Use neighbor cache instead of looking up
+        Chunk chunk = this.getChunkIfLoaded(pos.getX() >> 4, pos.getZ() >> 4);
+        if (chunk == null || !chunk.areNeighborsLoaded(1) /*!this.isAreaLoaded(pos, 16, false)*/)
         {
+            // CraftBukkit end
             return false;
         }
         else
@@ -3013,6 +3419,26 @@
 
     public List<Entity> getEntitiesInAABBexcluding(@Nullable Entity entityIn, AxisAlignedBB boundingBox, @Nullable Predicate <? super Entity > predicate)
     {
+        // From performant and uses GPL-3.0 LICENSE
+        List<Entity> entities = WorldCache.eeCache.get(boundingBox);
+        if (entities != null && !entities.isEmpty()) {
+            if (predicate == null ) {
+                return entities;
+            }
+
+            boolean allValid = true;
+
+            for (Entity entity : entities) {
+                if (!predicate.apply(entity)) {
+                    allValid = false;
+                    break;
+                }
+            }
+
+            if (allValid) {
+                return entities;
+            }
+        }
         List<Entity> list = Lists.<Entity>newArrayList();
         int j2 = MathHelper.floor((boundingBox.minX - MAX_ENTITY_RADIUS) / 16.0D);
         int k2 = MathHelper.floor((boundingBox.maxX + MAX_ENTITY_RADIUS) / 16.0D);
@@ -3029,19 +3455,20 @@
                 }
             }
         }
-
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.eeCache.put(boundingBox, list);
         return list;
     }
 
-    public <T extends Entity> List<T> getEntities(Class <? extends T > entityType, Predicate <? super T > filter)
-    {
+    public <T extends Entity> List<T> getEntities(Class<? extends T> entityType, Predicate<? super T> filter)
+	{
         List<T> list = Lists.<T>newArrayList();
 
         for (Entity entity4 : this.loadedEntityList)
-        {
-            if (entityType.isAssignableFrom(entity4.getClass()) && filter.apply((T)entity4))
-            {
-                list.add((T)entity4);
+		{
+            if (entityType.isAssignableFrom(entity4.getClass()) && filter.apply((T) entity4))
+			{
+                list.add((T) entity4);
             }
         }
 
@@ -3070,6 +3497,27 @@
 
     public <T extends Entity> List<T> getEntitiesWithinAABB(Class <? extends T > clazz, AxisAlignedBB aabb, @Nullable Predicate <? super T > filter)
     {
+        // From performant and uses GPL-3.0 LICENSE
+        List<Entity> entities = WorldCache.eeCache.get(aabb);
+        if (entities != null && !entities.isEmpty()) {
+            boolean allValid = true;
+
+            for (Entity entity : entities) {
+                if (!clazz.isInstance(entity)) {
+                    allValid = false;
+                    break;
+                }
+
+                if (filter != null && !filter.apply((T)entity)) {
+                    allValid = false;
+                    break;
+                }
+            }
+
+            if (allValid) {
+                return (List<T>) entities;
+            }
+        }
         int j2 = MathHelper.floor((aabb.minX - MAX_ENTITY_RADIUS) / 16.0D);
         int k2 = MathHelper.ceil((aabb.maxX + MAX_ENTITY_RADIUS) / 16.0D);
         int l2 = MathHelper.floor((aabb.minZ - MAX_ENTITY_RADIUS) / 16.0D);
@@ -3086,7 +3534,8 @@
                 }
             }
         }
-
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.eeCache.put(aabb, (List<Entity>) list);
         return list;
     }
 
@@ -3142,7 +3591,16 @@
 
         for (Entity entity4 : this.loadedEntityList)
         {
-            if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).isNoDespawnRequired()) && entityType.isAssignableFrom(entity4.getClass()))
+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
+            if (entity4 instanceof EntityLiving) {
+                EntityLiving entityinsentient = (EntityLiving) entity4;
+                if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired()) {
+                    continue;
+                }
+            }
+
+            // if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).isNoDespawnRequired()) && entityType.isAssignableFrom(entity4.getClass()))
+            if (entityType.isAssignableFrom(entity4.getClass()))
             {
                 ++j2;
             }
@@ -3157,6 +3615,9 @@
         {
             if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity4, this)))
             {
+                if (entity4 == null || entity4.isDead || entity4.valid) { // Paper - prevent adding already added or dead entities
+                    continue;
+                }
                 loadedEntityList.add(entity4);
                 this.onEntityAdded(entity4);
             }
@@ -3173,19 +3634,24 @@
         IBlockState iblockstate1 = this.getBlockState(pos);
         AxisAlignedBB axisalignedbb = skipCollisionCheck ? null : blockIn.getDefaultState().getCollisionBoundingBox(this, pos);
 
+        boolean defaultReturn;
         if (!((placer instanceof EntityPlayer) || !net.minecraftforge.event.ForgeEventFactory.onBlockPlace(placer, new net.minecraftforge.common.util.BlockSnapshot(this, pos, blockIn.getDefaultState()), sidePlacedOn).isCanceled())) return false;
         if (axisalignedbb != Block.NULL_AABB && !this.checkNoEntityCollision(axisalignedbb.offset(pos))) // Forge: Remove second parameter, we patch placer to be non-null, passing it here skips collision checks for the placer
         {
-            return false;
+            defaultReturn = false;
         }
         else if (iblockstate1.getMaterial() == Material.CIRCUITS && blockIn == Blocks.ANVIL)
         {
-            return true;
+            defaultReturn = true;
         }
         else
         {
-            return iblockstate1.getBlock().isReplaceable(this, pos) && blockIn.canPlaceBlockOnSide(this, pos, sidePlacedOn);
+            defaultReturn = iblockstate1.getBlock().isReplaceable(this, pos) && blockIn.canPlaceBlockOnSide(this, pos, sidePlacedOn);
         }
+        BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), CraftMagicNumbers.getId(blockIn), defaultReturn);
+        this.getServer().getPluginManager().callEvent(event);
+
+        return event.isBuildable();
     }
 
     public int getSeaLevel()
@@ -3350,6 +3816,11 @@
         {
             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
 
+			// CraftBukkit start - Fixed an NPE
+            if (entityplayer1 == null || entityplayer1.isDead) {
+                continue;
+            }
+            // CraftBukkit end
             if (p_190525_9_.apply(entityplayer1))
             {
                 double d1 = entityplayer1.getDistanceSq(x, y, z);
@@ -3367,7 +3838,7 @@
 
     public boolean isAnyPlayerWithinRangeAt(double x, double y, double z, double range)
     {
-        for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
+		for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
         {
             EntityPlayer entityplayer = this.playerEntities.get(j2);
 
@@ -3382,8 +3853,8 @@
             }
         }
 
-        return false;
-    }
+        return false;    
+	}
 
     @Nullable
     public EntityPlayer getNearestAttackablePlayer(Entity entityIn, double maxXZDistance, double maxYDistance)
@@ -3406,7 +3877,6 @@
         for (int j2 = 0; j2 < this.playerEntities.size(); ++j2)
         {
             EntityPlayer entityplayer1 = this.playerEntities.get(j2);
-
             if (!entityplayer1.capabilities.disableDamage && entityplayer1.isEntityAlive() && !entityplayer1.isSpectator() && (p_184150_12_ == null || p_184150_12_.apply(entityplayer1)))
             {
                 double d1 = entityplayer1.getDistanceSq(posX, entityplayer1.posY, posZ);
@@ -3597,6 +4067,16 @@
     {
     }
 
+    // CraftBukkit start
+    // Calls the method that checks to see if players are sleeping
+    // Called by CraftPlayer.setPermanentSleeping()
+    public void checkSleepStatus() {
+        if (!this.isRemote) {
+            this.updateAllPlayersSleepingFlag();
+        }
+    }
+    // CraftBukkit end
+
     public float getThunderStrength(float delta)
     {
         return (this.prevThunderingStrength + (this.thunderingStrength - this.prevThunderingStrength) * delta) * this.getRainStrength(delta);
@@ -3885,7 +4365,7 @@
         int j2 = x * 16 + 8 - blockpos1.getX();
         int k2 = z * 16 + 8 - blockpos1.getZ();
         int l2 = 128;
-        return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128;
+        return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128 && this.keepSpawnInMemory;
     }
 
     /* ======================================== FORGE START =====================================*/
@@ -3933,6 +4413,10 @@
 
     public Iterator<Chunk> getPersistentChunkIterable(Iterator<Chunk> chunkIterator)
     {
+        if (MohistConfig.instance.disableForgeChunkForceSystem.getValue())
+        {
+            return chunkIterator;
+        }
         return net.minecraftforge.common.ForgeChunkManager.getPersistentChunksIterableFor(this, chunkIterator);
     }
     /**
@@ -4021,4 +4505,11 @@
     {
         return null;
     }
+
+    public long getRealTimeTicks() {
+        if (this.getMinecraftServer() != null) {
+            return ((RealTimeTicking) this.getMinecraftServer()).getRealTimeTicks();
+        }
+        return 1;
+    }
 }
