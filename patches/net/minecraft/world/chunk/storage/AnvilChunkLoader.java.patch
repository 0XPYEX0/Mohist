--- ../src-base/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -1,11 +1,10 @@
 package net.minecraft.world.chunk.storage;
 
 import com.google.common.collect.Maps;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -13,10 +12,10 @@
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
-import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.ClassInheritanceMultiMap;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
@@ -31,6 +30,8 @@
 import net.minecraft.world.chunk.NibbleArray;
 import net.minecraft.world.storage.IThreadedFileIO;
 import net.minecraft.world.storage.ThreadedFileIOBase;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkDataEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -58,8 +59,9 @@
     @Nullable
     public Chunk loadChunk(World worldIn, int x, int z) throws IOException
     {
+        worldIn.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = this.loadChunk__Async(worldIn, x, z);
-
+        worldIn.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
         if (data != null)
         {
             Chunk chunk = (Chunk) data[0];
@@ -79,15 +81,14 @@
 
         if (nbttagcompound == null)
         {
-            DataInputStream datainputstream = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, x, z);
+            NBTTagCompound nbtTagCompound = RegionFileCache.getChunkInputStreamCB(this.chunkSaveLocation, x, z);
 
-            if (datainputstream == null)
+            if (nbtTagCompound == null)
             {
                 return null;
             }
 
-            nbttagcompound = this.fixer.process(FixTypes.CHUNK, CompressedStreamTools.read(datainputstream));
-            datainputstream.close(); // Forge: close stream after use
+            nbttagcompound = this.fixer.process(FixTypes.CHUNK, nbtTagCompound);
         }
 
         return this.checkedReadChunkFromNBT__Async(worldIn, x, z, nbttagcompound);
@@ -205,32 +206,29 @@
         }
         else
         {
-            ChunkPos chunkpos = this.chunksToSave.keySet().iterator().next();
-            boolean lvt_3_1_;
+            boolean lvt_3_1_ = false;
+            ChunkPos chunkpos = null;
+            Iterator ite = this.chunksToSave.keySet().iterator();
+            while(ite.hasNext()) {
+                chunkpos = (ChunkPos) ite.next();
 
-            try
-            {
-                this.chunksBeingSaved.add(chunkpos);
-                NBTTagCompound nbttagcompound = this.chunksToSave.remove(chunkpos);
+                try {
+                    this.chunksBeingSaved.add(chunkpos);
+                    NBTTagCompound nbttagcompound = this.chunksToSave.remove(chunkpos);
 
-                if (nbttagcompound != null)
-                {
-                    try
-                    {
-                        this.writeChunkData(chunkpos, nbttagcompound);
+                    if (nbttagcompound != null) {
+                        try {
+                            this.writeChunkData(chunkpos, nbttagcompound);
+                        } catch (Exception exception) {
+                            LOGGER.error("Failed to save chunk", (Throwable) exception);
+                        }
                     }
-                    catch (Exception exception)
-                    {
-                        LOGGER.error("Failed to save chunk", (Throwable)exception);
-                    }
-                }
 
-                lvt_3_1_ = true;
+                    lvt_3_1_ = true;
+                } finally {
+                    this.chunksBeingSaved.remove(chunkpos);
+                }
             }
-            finally
-            {
-                this.chunksBeingSaved.remove(chunkpos);
-            }
 
             return lvt_3_1_;
         }
@@ -238,9 +236,10 @@
 
     private void writeChunkData(ChunkPos pos, NBTTagCompound compound) throws IOException
     {
-        DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z);
-        CompressedStreamTools.write(compound, dataoutputstream);
-        dataoutputstream.close();
+        // DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z);
+        // CompressedStreamTools.write(compound, dataoutputstream);
+        // dataoutputstream.close();
+        RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z, compound);
     }
 
     public void saveExtraChunkData(World worldIn, Chunk chunkIn) throws IOException
@@ -478,6 +477,7 @@
 
     public void loadEntities(World worldIn, NBTTagCompound compound, Chunk chunk)
     {
+        worldIn.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = compound.getTagList("Entities", 10);
 
         for (int j1 = 0; j1 < nbttaglist1.tagCount(); ++j1)
@@ -486,7 +486,8 @@
             readChunkEntity(nbttagcompound1, worldIn, chunk);
             chunk.setHasEntities(true);
         }
-
+        worldIn.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = compound.getTagList("TileEntities", 10);
 
         for (int k1 = 0; k1 < nbttaglist2.tagCount(); ++k1)
@@ -499,7 +500,8 @@
                 chunk.addTileEntity(tileentity);
             }
         }
-
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
         if (compound.hasKey("TileTicks", 9))
         {
             NBTTagList nbttaglist3 = compound.getTagList("TileTicks", 10);
@@ -521,6 +523,7 @@
                 worldIn.scheduleBlockUpdate(new BlockPos(nbttagcompound3.getInteger("x"), nbttagcompound3.getInteger("y"), nbttagcompound3.getInteger("z")), block, nbttagcompound3.getInteger("t"), nbttagcompound3.getInteger("p"));
             }
         }
+        worldIn.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
     }
 
     @Nullable
@@ -558,6 +561,11 @@
     @Nullable
     public static Entity readWorldEntityPos(NBTTagCompound compound, World worldIn, double x, double y, double z, boolean attemptSpawn)
     {
+        return spawnEntity(compound, worldIn, x, y, z, attemptSpawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public static Entity spawnEntity(NBTTagCompound compound, World worldIn, double x, double y, double z, boolean attemptSpawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason)
+    {
         Entity entity = createEntityFromNBT(compound, worldIn);
 
         if (entity == null)
@@ -568,7 +576,7 @@
         {
             entity.setLocationAndAngles(x, y, z, entity.rotationYaw, entity.rotationPitch);
 
-            if (attemptSpawn && !worldIn.spawnEntity(entity))
+            if (attemptSpawn && !worldIn.addEntity(entity, spawnReason))
             {
                 return null;
             }
@@ -609,8 +617,11 @@
 
     public static void spawnEntity(Entity entityIn, World worldIn)
     {
-        if (worldIn.spawnEntity(entityIn) && entityIn.isBeingRidden())
-        {
+        spawnEntity(entityIn, worldIn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public static void spawnEntity(Entity entityIn, World worldIn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        if (worldIn.addEntity(entityIn, reason) && entityIn.isBeingRidden()) {
             for (Entity entity : entityIn.getPassengers())
             {
                 spawnEntity(entity, worldIn);
