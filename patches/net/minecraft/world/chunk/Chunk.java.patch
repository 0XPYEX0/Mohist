--- ../src-base/minecraft/net/minecraft/world/chunk/Chunk.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/Chunk.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.chunk;
 
 import com.google.common.base.Predicate;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import java.util.Arrays;
@@ -8,20 +9,28 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.block.ITileEntityProvider;
+import net.minecraft.block.BlockSand;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Biomes;
 import net.minecraft.init.Blocks;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.network.PacketBuffer;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ClassInheritanceMultiMap;
+import net.minecraft.util.EntitySelectors;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -40,6 +49,7 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Server;
 
 public class Chunk implements net.minecraftforge.common.capabilities.ICapabilityProvider
 {
@@ -50,13 +60,13 @@
     private final int[] precipitationHeightMap;
     private final boolean[] updateSkylightColumns;
     private boolean loaded;
-    private final World world;
-    private final int[] heightMap;
+    public final World world;
+    public final int[] heightMap;
     public final int x;
     public final int z;
     private boolean isGapLightingUpdated;
-    private final Map<BlockPos, TileEntity> tileEntities;
-    private final ClassInheritanceMultiMap<Entity>[] entityLists;
+    public final Map<BlockPos, TileEntity> tileEntities;
+    public final ClassInheritanceMultiMap<Entity>[] entityLists;  // Spigot
     private boolean isTerrainPopulated;
     private boolean isLightPopulated;
     private boolean ticked;
@@ -68,7 +78,37 @@
     private int queuedLightChecks;
     private final ConcurrentLinkedQueue<BlockPos> tileEntityPosQueue;
     public boolean unloadQueued;
+    public gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
 
+    // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
+    private int neighbors = 0x1 << 12;
+    public long chunkKey;
+
+    public boolean areNeighborsLoaded(final int radius) {
+        switch (radius) {
+            case 2:
+                return this.neighbors == Integer.MAX_VALUE >> 6;
+            case 1:
+                final int mask =
+                        //       x        z   offset          x        z   offset          x         z   offset
+                        (0x1 << (1 * 5 +  1 + 12)) | (0x1 << (0 * 5 +  1 + 12)) | (0x1 << (-1 * 5 +  1 + 12)) |
+                        (0x1 << (1 * 5 +  0 + 12)) | (0x1 << (0 * 5 +  0 + 12)) | (0x1 << (-1 * 5 +  0 + 12)) |
+                        (0x1 << (1 * 5 + -1 + 12)) | (0x1 << (0 * 5 + -1 + 12)) | (0x1 << (-1 * 5 + -1 + 12));
+                return (this.neighbors & mask) == mask;
+            default:
+                throw new UnsupportedOperationException(String.valueOf(radius));
+        }
+    }
+
+    public void setNeighborLoaded(final int x, final int z) {
+        this.neighbors |= 0x1 << (x * 5 + 12 + z);
+    }
+
+    public void setNeighborUnloaded(final int x, final int z) {
+        this.neighbors &= ~(0x1 << (x * 5 + 12 + z));
+    }
+    // CraftBukkit end
+
     public Chunk(World worldIn, int x, int z)
     {
         this.storageArrays = new ExtendedBlockStorage[16];
@@ -92,8 +132,13 @@
         Arrays.fill(this.precipitationHeightMap, -999);
         Arrays.fill(this.blockBiomeArray, (byte) - 1);
         capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this);
+        this.bukkitChunk = new org.bukkit.craftbukkit.v1_12_R1.CraftChunk(this);
+        this.chunkKey = ChunkPos.asLong(this.x, this.z);
     }
 
+    public org.bukkit.Chunk bukkitChunk;
+    public boolean mustSave;
+
     public Chunk(World worldIn, ChunkPrimer primer, int x, int z)
     {
         this(worldIn, x, z);
@@ -743,6 +788,22 @@
         entityIn.chunkCoordZ = this.z;
         this.entityLists[k].add(entityIn);
         this.markDirty(); // Forge - ensure chunks are marked to save after an entity add
+        // Spigot start - increment creature type count
+        // Keep this synced up with World.a(Class)
+        if (entityIn instanceof EntityLiving) {
+            EntityLiving entityinsentient = (EntityLiving) entityIn;
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired()) {
+                return;
+            }
+        }
+        for ( EnumCreatureType creatureType : EnumCreatureType.values() )
+        {
+            if ( creatureType.getCreatureClass().isAssignableFrom( entityIn.getClass() ) )
+            {
+                this.entityCount.adjustOrPutValue( creatureType.getCreatureClass(), 1, 1 );
+            }
+        }
+        // Spigot end
     }
 
     public void removeEntity(Entity entityIn)
@@ -764,6 +825,22 @@
 
         this.entityLists[index].remove(entityIn);
         this.markDirty(); // Forge - ensure chunks are marked to save after entity removals
+        // Spigot start - decrement creature type count
+        // Keep this synced up with World.a(Class)
+        if (entityIn instanceof EntityLiving) {
+            EntityLiving entityinsentient = (EntityLiving) entityIn;
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired()) {
+                return;
+            }
+        }
+        for ( EnumCreatureType creatureType : EnumCreatureType.values() )
+        {
+            if ( creatureType.getCreatureClass().isAssignableFrom( entityIn.getClass() ) )
+            {
+                this.entityCount.adjustValue( creatureType.getCreatureClass(), -1 );
+            }
+        }
+        // Spigot end
     }
 
     public boolean canSeeSky(BlockPos pos)
@@ -874,7 +951,14 @@
 
         for (ClassInheritanceMultiMap<Entity> classinheritancemultimap : this.entityLists)
         {
-            this.world.unloadEntities(classinheritancemultimap);
+            // Do not pass along players, as doing so can get them stuck outside of time.
+            // (which for example disables inventory icon updates and prevents block breaking)
+            this.world.unloadEntities(
+                    classinheritancemultimap
+                            .stream()
+                            .filter(entity -> !(entity instanceof EntityPlayerMP))
+                            .collect(Collectors.toCollection(() -> new ClassInheritanceMultiMap<>(Entity.class)))
+            );
         }
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(this));
     }
@@ -1001,6 +1085,65 @@
         }
     }
 
+    public void populateCB(IChunkProvider chunkProvider, IChunkGenerator chunkGenrator, boolean newChunk)
+    {
+        world.timings.syncChunkLoadPostTimer.startTiming(); // Spigot
+        Server server = world.getServer();
+        if (server != null) {
+            /*
+             * If it's a new world, the first few chunks are generated inside
+             * the World constructor. We can't reliably alter that, so we have
+             * no way of creating a CraftWorld/CraftServer at that point.
+             */
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
+        }
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = getWorld().getChunkIfLoaded(this.x + x, this.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborLoaded(-x, -z);
+                    setNeighborLoaded(x, z);
+                }
+            }
+        }
+        Chunk chunk = chunkProvider.getLoadedChunk(this.x, this.z - 1);
+        Chunk chunk1 = chunkProvider.getLoadedChunk(this.x + 1, this.z);
+        Chunk chunk2 = chunkProvider.getLoadedChunk(this.x, this.z + 1);
+        Chunk chunk3 = chunkProvider.getLoadedChunk(this.x - 1, this.z);
+
+        if (chunk1 != null && chunk2 != null && chunkProvider.getLoadedChunk(this.x + 1, this.z + 1) != null)
+        {
+            this.populate(chunkGenrator);
+        }
+
+        if (chunk3 != null && chunk2 != null && chunkProvider.getLoadedChunk(this.x - 1, this.z + 1) != null)
+        {
+            chunk3.populate(chunkGenrator);
+        }
+
+        if (chunk != null && chunk1 != null && chunkProvider.getLoadedChunk(this.x + 1, this.z - 1) != null)
+        {
+            chunk.populate(chunkGenrator);
+        }
+
+        if (chunk != null && chunk3 != null)
+        {
+            Chunk chunk4 = chunkProvider.getLoadedChunk(this.x - 1, this.z - 1);
+
+            if (chunk4 != null)
+            {
+                chunk4.populate(chunkGenrator);
+            }
+        }
+        world.timings.syncChunkLoadPostTimer.stopTiming(); // Spigot
+    }
+
     protected void populate(IChunkGenerator generator)
     {
         if (populating != null && net.minecraftforge.common.ForgeModContainer.logCascadingWorldGeneration) logCascadingWorldGeneration();
@@ -1017,6 +1160,26 @@
         {
             this.checkLight();
             generator.populate(this.x, this.z);
+            BlockSand.fallInstantly = true;
+            Random random = new Random();
+            random.setSeed(world.getSeed());
+            long xRand = random.nextLong() / 2L * 2L + 1L;
+            long zRand = random.nextLong() / 2L * 2L + 1L;
+            random.setSeed((long) this.x * xRand + (long) this.z * zRand ^ world.getSeed());
+
+            org.bukkit.World world = this.world.getWorld();
+            if (world != null) {
+                this.world.populating = true;
+                try {
+                    for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, bukkitChunk);
+                    }
+                } finally {
+                    this.world.populating = false;
+                }
+            }
+            BlockSand.fallInstantly = false;
+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
             net.minecraftforge.fml.common.registry.GameRegistry.generateWorld(this.x, this.z, this.world, generator, this.world.getChunkProvider());
             this.markDirty();
         }
@@ -1086,7 +1249,7 @@
 
     public boolean isPopulated()
     {
-        return this.ticked && this.isTerrainPopulated && this.isLightPopulated;
+        return this.ticked && this.isTerrainPopulated;
     }
 
     public boolean wasTicked()
@@ -1548,8 +1711,8 @@
             net.minecraftforge.fml.common.FMLLog.log.debug(format, "Minecraft", this.getPos(), this.world.provider.getDimension(), this.world.provider.getDimensionType().getName(), populating);
             net.minecraftforge.fml.common.FMLLog.log.debug("Consider setting 'fixVanillaCascading' to 'true' in the Forge config to fix many cases where this occurs in the base game.");
         } else {
-            net.minecraftforge.fml.common.FMLLog.log.warn(format, activeModContainer.getName(), this.getPos(), this.world.provider.getDimension(), this.world.provider.getDimensionType().getName(), populating);
-            net.minecraftforge.fml.common.FMLLog.log.warn("Please report this to the mod's issue tracker. This log can be disabled in the Forge config.");
+            net.minecraftforge.fml.common.FMLLog.log.debug(format, activeModContainer.getName(), this.getPos(), this.world.provider.getDimension(), this.world.provider.getDimensionType().getName(), populating);
+            net.minecraftforge.fml.common.FMLLog.log.debug("Please report this to the mod's issue tracker. This log can be disabled in the Forge config.");
         }
     }
 
