--- ../src-base/minecraft/net/minecraft/command/CommandHandler.java
+++ ../src-work/minecraft/net/minecraft/command/CommandHandler.java
@@ -14,28 +14,32 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextComponentTranslation;
 import net.minecraft.util.text.TextFormatting;
+import net.minecraftforge.server.command.TextComponentHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.command.CommandWrapper;
+import org.bukkit.craftbukkit.v1_12_R1.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.v1_12_R1.command.ModCustomCommand;
+import org.bukkit.help.GenericCommandHelpTopic;
+import red.mohist.api.ServerAPI;
+import red.mohist.util.i18n.Message;
 
 public abstract class CommandHandler implements ICommandManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Map<String, ICommand> commandMap = Maps.<String, ICommand>newHashMap();
+    private final Map<String, ICommand> commandMod = Maps.<String, ICommand>newHashMap();
     private final Set<ICommand> commandSet = Sets.<ICommand>newHashSet();
 
     public int executeCommand(ICommandSender sender, String rawCommand)
     {
         rawCommand = rawCommand.trim();
 
-        if (rawCommand.startsWith("/"))
-        {
-            rawCommand = rawCommand.substring(1);
-        }
-
         String[] astring = rawCommand.split(" ");
         String s = astring[0];
         astring = dropFirstString(astring);
         ICommand icommand = this.commandMap.get(s);
+        if (icommand == null) icommand = CommandWrapper.toNMSCommand(sender, s);
         int i = 0;
 
         try
@@ -50,6 +54,17 @@
             }
             else if (icommand.checkPermission(this.getServer(), sender))
             {
+                net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(icommand, sender, astring);
+                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event))
+                {
+                    if (event.getException() != null)
+                    {
+                        com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+                    }
+                    return 1;
+                }
+                if (event.getParameters() != null) astring = event.getParameters();
+
                 if (j > -1)
                 {
                     List<Entity> list = EntitySelector.<Entity>matchEntities(sender, astring[j], Entity.class);
@@ -135,16 +150,46 @@
 
     public ICommand registerCommand(ICommand command)
     {
+        String pre = command.getClass().getName().substring(command.getClass().getName().lastIndexOf('.')+1).toLowerCase() + "." + command.getName();
+        if (command instanceof CommandBase)
+        {
+        	if (!((CommandBase)command).permissionNode.equals("minecraft"))
+        	{
+        		pre = ((CommandBase)command).permissionNode;
+        		this.commandMod.put(command.getName(), command);
+        	}
+        }
+        return registerCommand(command, pre);
+    }
+
+    public ICommand registerCommand(String permissionGroup, ICommand par1ICommand)
+    {
+        return registerCommand(par1ICommand, permissionGroup + "." + par1ICommand.getName());
+    }
+
+    public ICommand registerCommand(ICommand command, String permissionNode) {
+        List<String> list = command.getAliases();
         this.commandMap.put(command.getName(), command);
         this.commandSet.add(command);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = MinecraftServer.getServerInst().server.getCraftCommandMap();
 
-        for (String s : command.getAliases())
-        {
-            ICommand icommand = this.commandMap.get(s);
-
-            if (icommand == null || !icommand.getName().equals(s))
-            {
-                this.commandMap.put(s, command);
+        String modid = ServerAPI.forgecmd.get(command.getName());
+        String description =  "A "+ modid +" provided command.";
+        String usage = TextComponentHelper.createComponentTranslation(MinecraftServer.getServerInst().server.getServer(), command.getUsage(MinecraftServer.getServerInst().server.getServer())).getFormattedText();
+        ModCustomCommand customCommand = new ModCustomCommand((CommandBase) command, description, usage);
+        customCommand.setPermission(permissionNode);
+        if (list != null) customCommand.setAliases(list);
+        commandMap.register(command.getName(), customCommand);
+        // Add mods command to helps
+        getServer().server.helpMap.addTopic(new GenericCommandHelpTopic(customCommand));
+        LogManager.getLogger().debug(Message.getFormatString("command.register", new Object[]{command.getName(), permissionNode}));
+        if (list != null) {
+            for (String s : list) {
+                ICommand icommand = (ICommand)this.commandMap.get(s);
+                if (icommand == null || !icommand.getName().equals(s)) {
+                    this.commandMap.put(s, command);
+                }
             }
         }
 
@@ -212,6 +257,11 @@
     {
         return this.commandMap;
     }
+    
+    public Map<String, ICommand> getCommandMod()
+    {
+        return this.commandMod;
+    }
 
     private int getUsernameIndex(ICommand command, String[] args) throws CommandException
     {
