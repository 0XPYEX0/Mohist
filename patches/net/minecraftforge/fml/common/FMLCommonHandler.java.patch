--- ../src-base/minecraft/net/minecraftforge/fml/common/FMLCommonHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/FMLCommonHandler.java
@@ -19,6 +19,13 @@
 
 package net.minecraftforge.fml.common;
 
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableList.Builder;
+import com.google.common.collect.Lists;
+import com.google.common.collect.MapMaker;
+import com.google.common.collect.Maps;
+import com.mojang.authlib.properties.Property;
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
@@ -37,7 +44,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.TimeUnit;
-
+import javax.annotation.Nullable;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.item.EntityItem;
@@ -58,6 +65,7 @@
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.client.model.animation.Animation;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.CompoundDataFixer;
@@ -69,23 +77,12 @@
 import net.minecraftforge.fml.common.gameevent.TickEvent.Phase;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
-import net.minecraftforge.fml.common.thread.SidedThreadGroup;
 import net.minecraftforge.fml.relauncher.CoreModManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.server.FMLServerHandler;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Logger;
 
-import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableList.Builder;
-import com.google.common.collect.Lists;
-import com.google.common.collect.MapMaker;
-import com.google.common.collect.Maps;
-
-import javax.annotation.Nullable;
-
 /**
  * The main class for non-obfuscated hook handling code
  *
@@ -198,7 +195,7 @@
 
     public Side getSide()
     {
-        return sidedDelegate.getSide();
+        return Side.SERVER;
     }
 
     /**
@@ -208,8 +205,7 @@
      */
     public Side getEffectiveSide()
     {
-        final ThreadGroup group = Thread.currentThread().getThreadGroup();
-        return group instanceof SidedThreadGroup ? ((SidedThreadGroup) group).getSide() : Side.CLIENT;
+        return Side.SERVER;
     }
     /**
      * Raise an exception
@@ -385,6 +381,10 @@
 
     public void handleWorldDataSave(SaveHandler handler, WorldInfo worldInfo, NBTTagCompound tagCompound)
     {
+        if (worldInfo.getDimension() != 0)
+        {
+            return;
+        }
         for (ModContainer mc : Loader.instance().getModList())
         {
             if (mc instanceof InjectedModContainer)
@@ -405,7 +405,7 @@
         {
             return;
         }
-        if (handlerSet.contains(handler))
+        if (handlerSet.contains(handler) || DimensionManager.getWorld(0) != null)
         {
             return;
         }
@@ -507,7 +507,7 @@
         MinecraftServer server = getMinecraftServerInstance();
         Loader.instance().serverStopped();
         // FORCE the internal server to stop: hello optifine workaround!
-        if (server!=null) ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, false, "field_71316"+"_v");
+        if (server!=null) ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, false, "field_71316"+"_v",  "u", "serverStopped");
 
         // allow any pending exit to continue, clear exitLatch
         CountDownLatch latch = exitLatch;
@@ -522,16 +522,7 @@
     public String getModName()
     {
         List<String> modNames = Lists.newArrayListWithExpectedSize(3);
-        modNames.add("fml");
-        if (!noForge)
-        {
-            modNames.add(ForgeVersion.MOD_ID);
-        }
-
-        if (Loader.instance().getFMLBrandingProperties().containsKey("snooperbranding"))
-        {
-            modNames.add(Loader.instance().getFMLBrandingProperties().get("snooperbranding"));
-        }
+        modNames.add("Mohist");
         return Joiner.on(',').join(modNames);
     }
 
@@ -639,6 +630,21 @@
             return false;
         }
 
+        //Sponge start
+        if (packet.getRequestedState() == EnumConnectionState.LOGIN) {
+            Property[] pr = manager.spoofedProfile;
+            if (pr != null) {
+                for (Property p : pr) {
+                    if (p.getName().equalsIgnoreCase("forgeClient") && p.getValue().equalsIgnoreCase("true")) {
+                        // Manually tell the system that we're a FML client.
+                        manager.channel().attr(NetworkRegistry.FML_MARKER).set(true);
+                        return true;
+                    }
+                }
+            }
+        }
+        //Sponge end
+
         if (packet.getRequestedState() == EnumConnectionState.LOGIN && (!NetworkRegistry.INSTANCE.isVanillaAccepted(Side.CLIENT) && !packet.hasFMLMarker()))
         {
             manager.setConnectionState(EnumConnectionState.LOGIN);
