--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/CoreModManager.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/CoreModManager.java
@@ -72,7 +72,7 @@
 public class CoreModManager {
     private static final Attributes.Name COREMODCONTAINSFMLMOD = new Attributes.Name("FMLCorePluginContainsFMLMod");
     private static final Attributes.Name MODTYPE = new Attributes.Name("ModType");
-    private static String[] rootPlugins = { "net.minecraftforge.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin" };
+    private static String[] rootPlugins = { "net.minecraftforge.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin", "red.mohist.forge.MohistCorePlugin" };
     private static List<String> ignoredModFiles = Lists.newArrayList();
     private static Map<String, List<String>> transformers = Maps.newHashMap();
     private static List<FMLPluginWrapper> loadPlugins;
@@ -223,7 +223,7 @@
             {
                 FMLLog.log.info("Detected deobfuscated environment, loading log configs for colored console logs.");
                 // use server logging configs in deobfuscated environment so developers get nicely colored console logs
-                System.setProperty("log4j.configurationFile", "log4j2_server.xml");
+                System.setProperty("log4j.configurationFile", "log4j2_mohist.xml");
                 ((LoggerContext) LogManager.getContext(false)).reconfigure();
             }
         }
@@ -438,8 +438,6 @@
                 }
                 else
                 {
-                    FMLLog.log.warn("Found FMLCorePluginContainsFMLMod marker in {}. This is not recommended, @Mods should be in a separate jar from the coremod.",
-                            coreMod.getName());
                     candidateModFiles.add(coreMod.getName());
                 }
             }
@@ -534,19 +532,16 @@
             MCVersion requiredMCVersion = coreModClazz.getAnnotation(IFMLLoadingPlugin.MCVersion.class);
             if (!Arrays.asList(rootPlugins).contains(coreModClass) && (requiredMCVersion == null || Strings.isNullOrEmpty(requiredMCVersion.value())))
             {
-                FMLLog.log.warn("The coremod {} does not have a MCVersion annotation, it may cause issues with this version of Minecraft",
-                        coreModClass);
+                //FMLLog.log.warn("The coremod {} does not have a MCVersion annotation, it may cause issues with this version of Minecraft",coreModClass);
             }
             else if (requiredMCVersion != null && !FMLInjectionData.mccversion.equals(requiredMCVersion.value()))
             {
-                FMLLog.log.error("The coremod {} is requesting minecraft version {} and minecraft is {}. It will be ignored.", coreModClass,
-                        requiredMCVersion.value(), FMLInjectionData.mccversion);
+                //FMLLog.log.error("The coremod {} is requesting minecraft version {} and minecraft is {}. It will be ignored.", coreModClass,requiredMCVersion.value(), FMLInjectionData.mccversion);
                 return null;
             }
             else if (requiredMCVersion != null)
             {
-                FMLLog.log.debug("The coremod {} requested minecraft version {} and minecraft is {}. It will be loaded.", coreModClass,
-                        requiredMCVersion.value(), FMLInjectionData.mccversion);
+                //FMLLog.log.debug("The coremod {} requested minecraft version {} and minecraft is {}. It will be loaded.", coreModClass,requiredMCVersion.value(), FMLInjectionData.mccversion);
             }
             TransformerExclusions trExclusions = coreModClazz.getAnnotation(IFMLLoadingPlugin.TransformerExclusions.class);
             if (trExclusions != null)
@@ -579,7 +574,7 @@
                 }
                 else // This is a probably a normal minecraft workspace - log at warn
                 {
-                    FMLLog.log.warn("The coremod {} ({}) is not signed!", coreModName, coreModClass);
+                    FMLLog.log.debug("The coremod {} ({}) is not signed!", coreModName, coreModClass);
                 }
             }
             else
