--- ../src-base/minecraft/org/bukkit/Bukkit.java
+++ ../src-work/minecraft/org/bukkit/Bukkit.java
@@ -1,5 +1,6 @@
 package org.bukkit;
 
+import com.google.common.collect.ImmutableList;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.Serializable;
@@ -11,8 +12,10 @@
 import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Logger;
-
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import org.bukkit.Warning.WarningState;
+import org.bukkit.advancement.Advancement;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
 import org.bukkit.boss.BarStyle;
@@ -25,12 +28,15 @@
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.server.ServerListPingEvent;
+import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.map.MapView;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginManager;
@@ -39,14 +45,8 @@
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scoreboard.ScoreboardManager;
 import org.bukkit.util.CachedServerIcon;
+import red.mohist.Mohist;
 
-import com.google.common.collect.ImmutableList;
-import org.bukkit.advancement.Advancement;
-import org.bukkit.generator.ChunkGenerator;
-
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.meta.ItemMeta;
-
 /**
  * Represents the Bukkit core, for version and Server singleton handling
  */
@@ -56,7 +56,8 @@
     /**
      * Static class cannot be initialized.
      */
-    private Bukkit() {}
+    private Bukkit() {
+    }
 
     /**
      * Gets the current {@link Server} singleton
@@ -76,11 +77,11 @@
      */
     public static void setServer(Server server) {
         if (Bukkit.server != null) {
-            throw new UnsupportedOperationException("Cannot redefine singleton Server");
+            Bukkit.server = server;
         }
 
         Bukkit.server = server;
-        server.getLogger().info("This server is running " + getName() + " version " + getVersion() + " (Implementing API version " + getBukkitVersion() + ")");
+        Mohist.LOGGER.info("This server is running " + getName() + " version " + getVersion() + " (Implementing API version " + getBukkitVersion() + ")");
     }
 
     /**
@@ -128,7 +129,7 @@
      * affect the collection are fully supported. The effects following
      * (non-exhaustive) {@link Entity#teleport(Location) teleportation},
      * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
-     * String) kicking} are undefined. Any use of this collection from
+     *String) kicking} are undefined. Any use of this collection from
      * asynchronous threads is unsafe.
      * <p>
      * For safe consequential iteration or mimicking the old array behavior,
@@ -141,6 +142,10 @@
         return server.getOnlinePlayers();
     }
 
+    public static Player[] _INVALID_getOnlinePlayers() {
+        return server._INVALID_getOnlinePlayers();
+    }
+
     /**
      * Get the maximum amount of players which can login to this server.
      *
@@ -368,7 +373,7 @@
      * @param name the name to look up
      * @return a player if one was found, null otherwise
      */
-    @Deprecated
+
     public static Player getPlayer(String name) {
         return server.getPlayer(name);
     }
@@ -381,7 +386,7 @@
      * @param name Exact name of the player to retrieve
      * @return a player object if one was found, null otherwise
      */
-    @Deprecated
+
     public static Player getPlayerExact(String name) {
         return server.getPlayerExact(name);
     }
@@ -398,7 +403,7 @@
      * @param name the (partial) name to match
      * @return list of all possible players
      */
-    @Deprecated
+
     public static List<Player> matchPlayer(String name) {
         return server.matchPlayer(name);
     }
@@ -413,6 +418,11 @@
         return server.getPlayer(id);
     }
 
+    @Nullable
+    public static UUID getPlayerUniqueId(String playerName) {
+        return server.getPlayerUniqueId(playerName);
+    }
+
     /**
      * Gets the plugin manager for interfacing with plugins.
      *
@@ -512,7 +522,7 @@
      * @return a map view if it exists, or null otherwise
      * @deprecated Magic value
      */
-    @Deprecated
+
     public static MapView getMap(short id) {
         return server.getMap(id);
     }
@@ -572,7 +582,7 @@
      * Dispatches a command on this server, and executes it if found.
      *
      * @param sender the apparent sender of the command
-     * @param commandLine the command + arguments. Example: <code>test abc
+     * @param commandLine the command arguments. Example: <code>test abc
      *     123</code>
      * @return returns false if no target is found
      * @throws CommandException thrown when the executor for the given command
@@ -717,7 +727,7 @@
      * @return an offline player
      * @see #getOfflinePlayer(java.util.UUID)
      */
-    @Deprecated
+
     public static OfflinePlayer getOfflinePlayer(String name) {
         return server.getOfflinePlayer(name);
     }
@@ -1077,6 +1087,15 @@
     }
 
     /**
+     * Gets the idle kick timeout.
+     *
+     * @return the idle timeout in minutes
+     */
+    public static int getIdleTimeout() {
+        return server.getIdleTimeout();
+    }
+
+    /**
      * Set the idle kick timeout. Any players idle for the specified amount of
      * time will be automatically kicked.
      * <p>
@@ -1089,22 +1108,13 @@
     }
 
     /**
-     * Gets the idle kick timeout.
-     *
-     * @return the idle timeout in minutes
-     */
-    public static int getIdleTimeout() {
-        return server.getIdleTimeout();
-    }
-
-    /**
      * Create a ChunkData for use in a generator.
-     * 
+     *
      * See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
-     * 
+     *
      * @param world the world to create the ChunkData for
      * @return a new ChunkData for the world
-     * 
+     *
      */
     public static ChunkGenerator.ChunkData createChunkData(World world) {
         return server.createChunkData(world);
@@ -1134,7 +1144,18 @@
         return server.getEntity(uuid);
     }
 
+    // Paper start
+
     /**
+     * Gets the current server TPS
+     * @return current server TPS (1m, 5m, 15m in Paper-Server)
+     */
+    public static double[] getTPS() {
+        return server.getTPS();
+    }
+    // Paper end
+
+    /**
      * Get the advancement specified by this key.
      *
      * @param key unique advancement key
@@ -1158,8 +1179,54 @@
      * @see UnsafeValues
      * @return the unsafe values instance
      */
-    @Deprecated
+
     public static UnsafeValues getUnsafe() {
         return server.getUnsafe();
     }
+
+    public static Server.Spigot spigot() {
+        return server.spigot();
+    }
+
+    /**
+     * Checks if player names should be suggested when a command returns {@code null} as
+     * their tab completion result.
+     *
+     * @return true if player names should be suggested
+     */
+    public static boolean suggestPlayerNamesWhenNullTabCompletions() {
+        return server.suggestPlayerNamesWhenNullTabCompletions();
+    }
+
+    /**
+     * Creates a PlayerProfile for the specified uuid, with name as null
+     * @param uuid UUID to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nonnull UUID uuid) {
+        return server.createProfile(uuid);
+    }
+
+    /**
+     * Creates a PlayerProfile for the specified name, with UUID as null
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nonnull String name) {
+        return server.createProfile(name);
+    }
+
+    /**
+     * Creates a PlayerProfile for the specified name/uuid
+     *
+     * Both UUID and Name can not be null at same time. One must be supplied.
+     *
+     * @param uuid UUID to create profile for
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name) {
+        return server.createProfile(uuid, name);
+    }
+    // Paper end
 }
