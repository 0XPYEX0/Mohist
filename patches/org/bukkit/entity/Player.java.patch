--- ../src-base/minecraft/org/bukkit/entity/Player.java
+++ ../src-work/minecraft/org/bukkit/entity/Player.java
@@ -1,7 +1,6 @@
 package org.bukkit.entity;
 
 import java.net.InetSocketAddress;
-
 import org.bukkit.Achievement;
 import org.bukkit.ChatColor;
 import org.bukkit.Effect;
@@ -84,18 +83,18 @@
     public void setPlayerListName(String name);
 
     /**
-     * Set the target of the player's compass.
+     * Get the previously set compass target.
      *
-     * @param loc Location to point to
+     * @return location of the target
      */
-    public void setCompassTarget(Location loc);
+    public Location getCompassTarget();
 
     /**
-     * Get the previously set compass target.
+     * Set the target of the player's compass.
      *
-     * @return location of the target
+     * @param loc Location to point to
      */
-    public Location getCompassTarget();
+    public void setCompassTarget(Location loc);
 
     /**
      * Gets the socket address of this player
@@ -179,6 +178,13 @@
     public void loadData();
 
     /**
+     * Returns whether the player is sleeping ignored.
+     *
+     * @return Whether player is ignoring sleep.
+     */
+    public boolean isSleepingIgnored();
+
+    /**
      * Sets whether the player is ignored as not sleeping. If everyone is
      * either sleeping or has this flag set, then time will advance to the
      * next day. If everyone has this flag set but no one is actually in bed,
@@ -189,13 +195,6 @@
     public void setSleepingIgnored(boolean isSleeping);
 
     /**
-     * Returns whether the player is sleeping ignored.
-     *
-     * @return Whether player is ignoring sleep.
-     */
-    public boolean isSleepingIgnored();
-
-    /**
      * Play a note for a player at a location. This requires a note block
      * at the particular location (as far as the client is concerned). This
      * will not work without a note block. This will not work with cake.
@@ -394,13 +393,6 @@
      */
     public void sendMap(MapView map);
 
-    /**
-     * Forces an update of the player's entire inventory.
-     *
-     * @deprecated This method should not be relied upon as it is a temporary
-     *     work-around for a larger, more complicated issue.
-     */
-    @Deprecated
     public void updateInventory();
 
     /**
@@ -729,6 +721,14 @@
     public void resetPlayerTime();
 
     /**
+     * Returns the type of weather the player is currently experiencing.
+     *
+     * @return The WeatherType that the player is currently experiencing or
+     *     null if player is seeing server weather.
+     */
+    public WeatherType getPlayerWeather();
+
+    /**
      * Sets the type of weather the player will see.  When used, the weather
      * status of the player is locked until {@link #resetPlayerWeather()} is
      * used.
@@ -738,14 +738,6 @@
     public void setPlayerWeather(WeatherType type);
 
     /**
-     * Returns the type of weather the player is currently experiencing.
-     *
-     * @return The WeatherType that the player is currently experiencing or
-     *     null if player is seeing server weather.
-     */
-    public WeatherType getPlayerWeather();
-
-    /**
      * Restores the normal condition where the player's weather is controlled
      * by server conditions.
      */
@@ -967,38 +959,38 @@
     public void setFlying(boolean value);
 
     /**
-     * Sets the speed at which a client will fly. Negative values indicate
-     * reverse directions.
+     * Gets the current allowed speed that a client can fly.
      *
-     * @param value The new speed, from -1 to 1.
-     * @throws IllegalArgumentException If new speed is less than -1 or
-     *     greater than 1
+     * @return The current allowed speed, from -1 to 1
      */
-    public void setFlySpeed(float value) throws IllegalArgumentException;
+    public float getFlySpeed();
 
     /**
-     * Sets the speed at which a client will walk. Negative values indicate
+     * Sets the speed at which a client will fly. Negative values indicate
      * reverse directions.
      *
      * @param value The new speed, from -1 to 1.
      * @throws IllegalArgumentException If new speed is less than -1 or
      *     greater than 1
      */
-    public void setWalkSpeed(float value) throws IllegalArgumentException;
+    public void setFlySpeed(float value) throws IllegalArgumentException;
 
     /**
-     * Gets the current allowed speed that a client can fly.
+     * Gets the current allowed speed that a client can walk.
      *
      * @return The current allowed speed, from -1 to 1
      */
-    public float getFlySpeed();
+    public float getWalkSpeed();
 
     /**
-     * Gets the current allowed speed that a client can walk.
+     * Sets the speed at which a client will walk. Negative values indicate
+     * reverse directions.
      *
-     * @return The current allowed speed, from -1 to 1
+     * @param value The new speed, from -1 to 1.
+     * @throws IllegalArgumentException If new speed is less than -1 or
+     *     greater than 1
      */
-    public float getWalkSpeed();
+    public void setWalkSpeed(float value) throws IllegalArgumentException;
 
     /**
      * Request that the player's client download and switch texture packs.
@@ -1147,6 +1139,16 @@
     public void setHealthScaled(boolean scale);
 
     /**
+     * Gets the number that health is scaled to for the client.
+     *
+     * @return the number that health would be scaled to for the client if
+     *     HealthScaling is set to true
+     * @see Player#setHealthScale(double)
+     * @see Player#setHealthScaled(boolean)
+     */
+    public double getHealthScale();
+
+    /**
      * Sets the number to scale health to for the client; this will also
      * {@link #setHealthScaled(boolean) setHealthScaled(true)}.
      * <p>
@@ -1161,16 +1163,6 @@
     public void setHealthScale(double scale) throws IllegalArgumentException;
 
     /**
-     * Gets the number that health is scaled to for the client.
-     *
-     * @return the number that health would be scaled to for the client if
-     *     HealthScaling is set to true
-     * @see Player#setHealthScale(double)
-     * @see Player#setHealthScaled(boolean)
-     */
-    public double getHealthScale();
-
-    /**
      * Gets the entity which is followed by the camera when in
      * {@link GameMode#SPECTATOR}.
      *
@@ -1439,4 +1431,124 @@
      * @return the player's locale
      */
     public String getLocale();
+
+    @Override
+    Spigot spigot();
+
+    /**
+     * Gets the view distance for this player
+     * @return the player's view distance
+     */
+    public int getViewDistance();
+    // Spigot end
+
+    // Paper start
+
+    /**
+     * Sets the view distance for this player
+     * @param viewDistance the player's view distance
+     */
+    public void setViewDistance(int viewDistance);
+
+    // Spigot start
+    public class Spigot extends Entity.Spigot {
+        /**
+         *  Gets the connection address of this player, regardless of whether it
+         *  has been spoofed or not.
+         * @return the player's connection address
+         */
+        public InetSocketAddress getRawAddress() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @Deprecated
+        public void playEffect(Location location, Effect effect, int id, int data, float offsetX, float offsetY, float offsetZ, float speed, int particleCount, int radius) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets whether the player collides with entities
+         *
+         * @return the player's collision toggle state
+         * @deprecated see {@link LivingEntity#isCollidable()}
+         */
+        @Deprecated
+        public boolean getCollidesWithEntities() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets whether the player collides with entities
+         *
+         * @param collides whether the player should collide with entities or
+         * not.
+         * @deprecated {@link LivingEntity#setCollidable(boolean)}
+         */
+        @Deprecated
+        public void setCollidesWithEntities(boolean collides) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Respawns the player if dead.
+         */
+        public void respawn() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets player locale language.
+         *
+         * @return the player's client language settings
+         * @deprecated Use {@link Player#getLocale()}
+         */
+        @Deprecated
+        public String getLocale() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets all players hidden with {@link #hidePlayer(org.bukkit.entity.Player)}.
+         *
+         * @return a Set with all hidden players
+         */
+        public java.util.Set<Player> getHiddenPlayers() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @Override
+        public void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends the component to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param component the components to send
+         */
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent component) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sends an array of components as a single message to the specified screen position of this player
+         *
+         * @param position the screen position
+         * @param components the components to send
+         */
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        public int getPing()
+        {
+            throw new UnsupportedOperationException( "Not supported yet." );
+        }
+    }
 }
