--- ../src-base/minecraft/org/bukkit/Warning.java
+++ ../src-work/minecraft/org/bukkit/Warning.java
@@ -1,13 +1,12 @@
 package org.bukkit;
 
+import com.google.common.collect.ImmutableMap;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import java.util.Map;
 
-import com.google.common.collect.ImmutableMap;
-
 /**
  * This designates the warning state for a specific item.
  * <p>
@@ -19,6 +18,21 @@
 public @interface Warning {
 
     /**
+     * This sets if the deprecation warnings when registering events gets
+     * printed when the setting is in the default state.
+     *
+     * @return false normally, or true to encourage warning printout
+     */
+    boolean value() default false;
+
+    /**
+     * This can provide detailed information on why the event is deprecated.
+     *
+     * @return The reason an event is deprecated
+     */
+    String reason() default "";
+
+    /**
      * This represents the states that server verbose for warnings may be.
      */
     public enum WarningState {
@@ -37,7 +51,7 @@
          */
         DEFAULT;
 
-        private static final Map<String, WarningState> values = ImmutableMap.<String,WarningState>builder()
+        private static final Map<String, WarningState> values = ImmutableMap.<String, WarningState>builder()
                 .put("off", OFF)
                 .put("false", OFF)
                 .put("f", OFF)
@@ -54,25 +68,6 @@
                 .build();
 
         /**
-         * This method checks the provided warning should be printed for this
-         * state
-         *
-         * @param warning The warning annotation added to a deprecated item
-         * @return <ul>
-         *     <li>ON is always True
-         *     <li>OFF is always false
-         *     <li>DEFAULT is false if and only if annotation is not null and
-         *     specifies false for {@link Warning#value()}, true otherwise.
-         *     </ul>
-         */
-        public boolean printFor(Warning warning) {
-            if (this == DEFAULT) {
-                return warning == null || warning.value();
-            }
-            return this == ON;
-        }
-
-        /**
          * This method returns the corresponding warning state for the given
          * string value.
          *
@@ -90,20 +85,24 @@
             }
             return state;
         }
-    }
 
-    /**
-     * This sets if the deprecation warnings when registering events gets
-     * printed when the setting is in the default state.
-     *
-     * @return false normally, or true to encourage warning printout
-     */
-    boolean value() default false;
-
-    /**
-     * This can provide detailed information on why the event is deprecated.
-     *
-     * @return The reason an event is deprecated
-     */
-    String reason() default "";
+        /**
+         * This method checks the provided warning should be printed for this
+         * state
+         *
+         * @param warning The warning annotation added to a deprecated item
+         * @return <ul>
+         *     <li>ON is always True
+         *     <li>OFF is always false
+         *     <li>DEFAULT is false if and only if annotation is not null and
+         *     specifies false for {@link Warning#value()}, true otherwise.
+         *     </ul>
+         */
+        public boolean printFor(Warning warning) {
+            if (this == DEFAULT) {
+                return warning == null || warning.value();
+            }
+            return this == ON;
+        }
+    }
 }
