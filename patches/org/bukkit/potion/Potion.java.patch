--- ../src-base/minecraft/org/bukkit/potion/Potion.java
+++ ../src-work/minecraft/org/bukkit/potion/Potion.java
@@ -1,7 +1,6 @@
 package org.bukkit.potion;
 
 import java.util.Collection;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
@@ -12,8 +11,13 @@
  * Potion Adapter for pre-1.9 data values
  * see @PotionMeta for 1.9+
  */
-@Deprecated
 public class Potion {
+    private static final int EXTENDED_BIT = 0x40;
+    private static final int POTION_BIT = 0xF;
+    private static final int SPLASH_BIT = 0x4000;
+    private static final int TIER_BIT = 0x20;
+    private static final int TIER_SHIFT = 5;
+    private static PotionBrewer brewer;
     private boolean extended = false;
     private boolean splash = false;
     private int level = 1;
@@ -86,6 +90,106 @@
     }
 
     /**
+     *
+     * @param damage the damage value
+     * @return the produced potion
+     */
+    public static Potion fromDamage(int damage) {
+        PotionType type;
+        switch (damage & POTION_BIT) {
+            case 0:
+                type = PotionType.WATER;
+                break;
+            case 1:
+                type = PotionType.REGEN;
+                break;
+            case 2:
+                type = PotionType.SPEED;
+                break;
+            case 3:
+                type = PotionType.FIRE_RESISTANCE;
+                break;
+            case 4:
+                type = PotionType.POISON;
+                break;
+            case 5:
+                type = PotionType.INSTANT_HEAL;
+                break;
+            case 6:
+                type = PotionType.NIGHT_VISION;
+                break;
+            case 8:
+                type = PotionType.WEAKNESS;
+                break;
+            case 9:
+                type = PotionType.STRENGTH;
+                break;
+            case 10:
+                type = PotionType.SLOWNESS;
+                break;
+            case 11:
+                type = PotionType.JUMP;
+                break;
+            case 12:
+                type = PotionType.INSTANT_DAMAGE;
+                break;
+            case 13:
+                type = PotionType.WATER_BREATHING;
+                break;
+            case 14:
+                type = PotionType.INVISIBILITY;
+                break;
+            default:
+                type = PotionType.WATER;
+        }
+        Potion potion;
+        if (type == null || type == PotionType.WATER) {
+            potion = new Potion(PotionType.WATER);
+        } else {
+            int level = (damage & TIER_BIT) >> TIER_SHIFT;
+            level++;
+            potion = new Potion(type, level);
+        }
+        if ((damage & SPLASH_BIT) != 0) {
+            potion = potion.splash();
+        }
+        if ((damage & EXTENDED_BIT) != 0) {
+            potion = potion.extend();
+        }
+        return potion;
+    }
+
+    public static Potion fromItemStack(ItemStack item) {
+        Validate.notNull(item, "item cannot be null");
+        if (item.getType() != Material.POTION) {
+            throw new IllegalArgumentException("item is not a potion");
+        }
+        return fromDamage(item.getDurability());
+    }
+
+    /**
+     * Returns an instance of {@link PotionBrewer}.
+     *
+     * @return An instance of PotionBrewer
+     */
+    public static PotionBrewer getBrewer() {
+        return brewer;
+    }
+
+    /**
+     * Sets the current instance of {@link PotionBrewer}. Generally not to be
+     * used from within a plugin.
+     *
+     * @param other The new PotionBrewer
+     */
+    public static void setPotionBrewer(PotionBrewer other) {
+        if (brewer != null) {
+            brewer = other;
+        }
+        brewer = other;
+    }
+
+    /**
      * Chain this to the constructor to make the potion a splash potion.
      *
      * @return The potion.
@@ -166,6 +270,17 @@
     }
 
     /**
+     * Sets the level of this potion.
+     *
+     * @param level The new level of this potion
+     */
+    public void setLevel(int level) {
+        Validate.notNull(this.type, "No-effect potions don't have a level.");
+        Validate.isTrue(level > 0 && level <= 2, "Level must be between 1 and 2 for this potion");
+        this.level = level;
+    }
+
+    /**
      * Returns the {@link PotionType} of this potion.
      *
      * @return The type of this potion
@@ -175,6 +290,15 @@
     }
 
     /**
+     * Sets the {@link PotionType} of this potion.
+     *
+     * @param type The new type of this potion
+     */
+    public void setType(PotionType type) {
+        this.type = type;
+    }
+
+    /**
      * Returns whether this potion has an extended duration.
      *
      * @return Whether this potion has extended duration
@@ -203,17 +327,6 @@
     }
 
     /**
-     * Set whether this potion has extended duration. This will cause the
-     * potion to have roughly 8/3 more duration than a regular potion.
-     *
-     * @param isExtended Whether the potion should have extended duration
-     */
-    public void setHasExtendedDuration(boolean isExtended) {
-        Validate.isTrue(type == null || !type.isInstant(), "Instant potions cannot be extended");
-        extended = isExtended;
-    }
-
-    /**
      * Sets whether this potion is a splash potion. Splash potions can be
      * thrown for a radius effect.
      *
@@ -224,26 +337,17 @@
     }
 
     /**
-     * Sets the {@link PotionType} of this potion.
+     * Set whether this potion has extended duration. This will cause the
+     * potion to have roughly 8/3 more duration than a regular potion.
      *
-     * @param type The new type of this potion
+     * @param isExtended Whether the potion should have extended duration
      */
-    public void setType(PotionType type) {
-        this.type = type;
+    public void setHasExtendedDuration(boolean isExtended) {
+        Validate.isTrue(type == null || !type.isInstant(), "Instant potions cannot be extended");
+        extended = isExtended;
     }
 
     /**
-     * Sets the level of this potion.
-     *
-     * @param level The new level of this potion
-     */
-    public void setLevel(int level) {
-        Validate.notNull(this.type, "No-effect potions don't have a level.");
-        Validate.isTrue(level > 0 && level <= 2, "Level must be between 1 and 2 for this potion");
-        this.level = level;
-    }
-
-    /**
      * Converts this potion to a valid potion damage short, usable for potion
      * item stacks.
      *
@@ -276,114 +380,8 @@
         return itemStack;
     }
 
-    private static PotionBrewer brewer;
-
-    private static final int EXTENDED_BIT = 0x40;
-    private static final int POTION_BIT = 0xF;
-    private static final int SPLASH_BIT = 0x4000;
-    private static final int TIER_BIT = 0x20;
-    private static final int TIER_SHIFT = 5;
-
     /**
      *
-     * @param damage the damage value
-     * @return the produced potion
-     */
-    public static Potion fromDamage(int damage) {
-        PotionType type;
-        switch (damage & POTION_BIT) {
-            case 0:
-                type = PotionType.WATER;
-                break;
-            case 1:
-                type = PotionType.REGEN;
-                break;
-            case 2:
-                type = PotionType.SPEED;
-                break;
-            case 3:
-                type = PotionType.FIRE_RESISTANCE;
-                break;
-            case 4:
-                type = PotionType.POISON;
-                break;
-            case 5:
-                type = PotionType.INSTANT_HEAL;
-                break;
-            case 6:
-                type = PotionType.NIGHT_VISION;
-                break;
-            case 8:
-                type = PotionType.WEAKNESS;
-                break;
-            case 9:
-                type = PotionType.STRENGTH;
-                break;
-            case 10:
-                type = PotionType.SLOWNESS;
-                break;
-            case 11:
-                type = PotionType.JUMP;
-                break;
-            case 12:
-                type = PotionType.INSTANT_DAMAGE;
-                break;
-            case 13:
-                type = PotionType.WATER_BREATHING;
-                break;
-            case 14:
-                type = PotionType.INVISIBILITY;
-                break;
-            default:
-                type = PotionType.WATER;
-        }
-        Potion potion;
-        if (type == null || type == PotionType.WATER) {
-            potion = new Potion(PotionType.WATER);
-        } else {
-            int level = (damage & TIER_BIT) >> TIER_SHIFT;
-            level++;
-            potion = new Potion(type, level);
-        }
-        if ((damage & SPLASH_BIT) != 0) {
-            potion = potion.splash();
-        }
-        if ((damage & EXTENDED_BIT) != 0) {
-            potion = potion.extend();
-        }
-        return potion;
-    }
-
-    public static Potion fromItemStack(ItemStack item) {
-        Validate.notNull(item, "item cannot be null");
-        if (item.getType() != Material.POTION)
-            throw new IllegalArgumentException("item is not a potion");
-        return fromDamage(item.getDurability());
-    }
-
-    /**
-     * Returns an instance of {@link PotionBrewer}.
-     *
-     * @return An instance of PotionBrewer
-     */
-    public static PotionBrewer getBrewer() {
-        return brewer;
-    }
-
-    /**
-     * Sets the current instance of {@link PotionBrewer}. Generally not to be
-     * used from within a plugin.
-     *
-     * @param other The new PotionBrewer
-     */
-    public static void setPotionBrewer(PotionBrewer other) {
-        if (brewer != null)
-            throw new IllegalArgumentException("brewer can only be set internally");
-        brewer = other;
-    }
-
-    /**
-     *
      * @return the name id
      * @deprecated Non-functional
      */
