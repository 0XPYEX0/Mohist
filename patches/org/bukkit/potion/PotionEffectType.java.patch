--- ../src-base/minecraft/org/bukkit/potion/PotionEffectType.java
+++ ../src-work/minecraft/org/bukkit/potion/PotionEffectType.java
@@ -2,7 +2,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 
@@ -146,7 +145,10 @@
      * Loot table unluck.
      */
     public static final PotionEffectType UNLUCK = new PotionEffectTypeWrapper(27);
-
+    private static final Map<Integer, PotionEffectType> byId = new HashMap<Integer, PotionEffectType>(); // Cauldron change underlying storage to map
+    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
+    // will break on updates.
+    private static boolean acceptingNew = true;
     private final int id;
 
     protected PotionEffectType(int id) {
@@ -154,6 +156,80 @@
     }
 
     /**
+     * Gets the effect type specified by the unique id.
+     *
+     * @param id Unique ID to fetch
+     * @return Resulting type, or null if not found.
+     * @deprecated Magic value
+     */
+
+    public static PotionEffectType getById(int id) {
+        if (id >= byId.size() || id < 0) // Cauldron
+        {
+            return null;
+        }
+        return byId.get(id); // Cauldron
+    }
+
+    /**
+     * Gets the effect type specified by the given name.
+     *
+     * @param name Name of PotionEffectType to fetch
+     * @return Resulting PotionEffectType, or null if not found.
+     */
+    public static PotionEffectType getByName(String name) {
+        Validate.notNull(name, "name cannot be null");
+        return byName.get(name.toLowerCase(java.util.Locale.ENGLISH));
+    }
+
+    /**
+     * Registers an effect type with the given object.
+     * <p>
+     * Generally not to be used from within a plugin.
+     *
+     * @param type PotionType to register
+     */
+    public static void registerPotionEffectType(PotionEffectType type) {
+        // Cauldron start - allow vanilla to replace potions
+        /*
+        if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase(java.util.Locale.ENGLISH))) {
+            throw new IllegalArgumentException("Cannot set already-set type");
+        } else if (!acceptingNew) {
+            throw new IllegalStateException(
+                    "No longer accepting new potion effect types (can only be done by the server implementation)");
+        }
+
+        byId[type.id] = type;
+        */
+        byId.put(type.id, type);
+        byName.put(type.getName().toLowerCase(java.util.Locale.ENGLISH), type);
+    }
+
+    /**
+     * Stops accepting any effect type registrations.
+     */
+    public static void stopAcceptingRegistrations() {
+        acceptingNew = false;
+    }
+
+    /**
+     * Returns an array of all the registered {@link PotionEffectType}s.
+     * This array is not necessarily in any particular order and may contain null.
+     *
+     * @return Array of types.
+     */
+    public static PotionEffectType[] values() {
+        // Cauldron start
+        int maxId = 0;
+        for (int id : byId.keySet()) {
+            maxId = Math.max(maxId, id);
+        }
+        PotionEffectType[] result = new PotionEffectType[maxId + 1];
+        return byId.values().toArray(result); // Cauldron change underlying storage to map
+        // Cauldron end
+    }
+
+    /**
      * Creates a PotionEffect from this PotionEffectType, applying duration
      * modifiers and checks.
      *
@@ -179,7 +255,6 @@
      * @return Unique ID
      * @deprecated Magic value
      */
-    @Deprecated
     public int getId() {
         return id;
     }
@@ -214,10 +289,7 @@
             return false;
         }
         final PotionEffectType other = (PotionEffectType) obj;
-        if (this.id != other.id) {
-            return false;
-        }
-        return true;
+        return this.id == other.id;
     }
 
     @Override
@@ -229,70 +301,4 @@
     public String toString() {
         return "PotionEffectType[" + id + ", " + getName() + "]";
     }
-
-    private static final PotionEffectType[] byId = new PotionEffectType[28];
-    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
-    // will break on updates.
-    private static boolean acceptingNew = true;
-
-    /**
-     * Gets the effect type specified by the unique id.
-     *
-     * @param id Unique ID to fetch
-     * @return Resulting type, or null if not found.
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static PotionEffectType getById(int id) {
-        if (id >= byId.length || id < 0)
-            return null;
-        return byId[id];
-    }
-
-    /**
-     * Gets the effect type specified by the given name.
-     *
-     * @param name Name of PotionEffectType to fetch
-     * @return Resulting PotionEffectType, or null if not found.
-     */
-    public static PotionEffectType getByName(String name) {
-        Validate.notNull(name, "name cannot be null");
-        return byName.get(name.toLowerCase(java.util.Locale.ENGLISH));
-    }
-
-    /**
-     * Registers an effect type with the given object.
-     * <p>
-     * Generally not to be used from within a plugin.
-     *
-     * @param type PotionType to register
-     */
-    public static void registerPotionEffectType(PotionEffectType type) {
-        if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase(java.util.Locale.ENGLISH))) {
-            throw new IllegalArgumentException("Cannot set already-set type");
-        } else if (!acceptingNew) {
-            throw new IllegalStateException(
-                    "No longer accepting new potion effect types (can only be done by the server implementation)");
-        }
-
-        byId[type.id] = type;
-        byName.put(type.getName().toLowerCase(java.util.Locale.ENGLISH), type);
-    }
-
-    /**
-     * Stops accepting any effect type registrations.
-     */
-    public static void stopAcceptingRegistrations() {
-        acceptingNew = false;
-    }
-
-    /**
-     * Returns an array of all the registered {@link PotionEffectType}s.
-     * This array is not necessarily in any particular order and may contain null.
-     *
-     * @return Array of types.
-     */
-    public static PotionEffectType[] values() {
-        return byId.clone();
-    }
 }
