--- ../src-base/minecraft/org/bukkit/permissions/Permission.java
+++ ../src-work/minecraft/org/bukkit/permissions/Permission.java
@@ -5,11 +5,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.logging.Level;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.PluginManager;
+import red.mohist.Mohist;
 
 /**
  * Represents a unique permission that may be attached to a {@link
@@ -68,6 +67,143 @@
     }
 
     /**
+     * Loads a list of Permissions from a map of data, usually used from
+     * retrieval from a yaml file.
+     * <p>
+     * The data may contain a list of name:data, where the data contains the
+     * following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
+     *     specified, empty list.
+     * <li>description: Short string containing a very small description of
+     *     this description. If not specified, empty string.
+     * </ul>
+     *
+     * @param data Map of permissions
+     * @param error An error message to show if a permission is invalid.
+     * @param def Default permission value to use if missing
+     * @return Permission object
+     */
+    public static List<Permission> loadPermissions(Map<?, ?> data, String error, PermissionDefault def) {
+        List<Permission> result = new ArrayList<Permission>();
+
+        for (Map.Entry<?, ?> entry : data.entrySet()) {
+            try {
+                result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
+            } catch (Throwable ex) {
+                Mohist.LOGGER.error(String.format(error, entry.getKey()), ex);
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * Loads a Permission from a map of data, usually used from retrieval from
+     * a yaml file.
+     * <p>
+     * The data may contain the following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
+     *     specified, empty list.
+     * <li>description: Short string containing a very small description of
+     *     this description. If not specified, empty string.
+     * </ul>
+     *
+     * @param name Name of the permission
+     * @param data Map of keys
+     * @return Permission object
+     */
+    public static Permission loadPermission(String name, Map<String, Object> data) {
+        return loadPermission(name, data, DEFAULT_PERMISSION, null);
+    }
+
+    /**
+     * Loads a Permission from a map of data, usually used from retrieval from
+     * a yaml file.
+     * <p>
+     * The data may contain the following keys:
+     * <ul>
+     * <li>default: Boolean true or false. If not specified, false.
+     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
+     *     specified, empty list.
+     * <li>description: Short string containing a very small description of
+     *     this description. If not specified, empty string.
+     * </ul>
+     *
+     * @param name Name of the permission
+     * @param data Map of keys
+     * @param def Default permission value to use if not set
+     * @param output A list to append any created child-Permissions to, may be null
+     * @return Permission object
+     */
+    public static Permission loadPermission(String name, Map<?, ?> data, PermissionDefault def, List<Permission> output) {
+        Validate.notNull(name, "Name cannot be null");
+        Validate.notNull(data, "Data cannot be null");
+
+        String desc = null;
+        Map<String, Boolean> children = null;
+
+        if (data.get("default") != null) {
+            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
+            if (value != null) {
+                def = value;
+            } else {
+                throw new IllegalArgumentException("'default' key contained unknown value");
+            }
+        }
+
+        if (data.get("children") != null) {
+            Object childrenNode = data.get("children");
+            if (childrenNode instanceof Iterable) {
+                children = new LinkedHashMap<String, Boolean>();
+                for (Object child : (Iterable<?>) childrenNode) {
+                    if (child != null) {
+                        children.put(child.toString(), Boolean.TRUE);
+                    }
+                }
+            } else if (childrenNode instanceof Map) {
+                children = extractChildren((Map<?, ?>) childrenNode, name, def, output);
+            } else {
+                throw new IllegalArgumentException("'children' key is of wrong type");
+            }
+        }
+
+        if (data.get("description") != null) {
+            desc = data.get("description").toString();
+        }
+
+        return new Permission(name, desc, def, children);
+    }
+
+    private static Map<String, Boolean> extractChildren(Map<?, ?> input, String name, PermissionDefault def, List<Permission> output) {
+        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+
+        for (Map.Entry<?, ?> entry : input.entrySet()) {
+            if ((entry.getValue() instanceof Boolean)) {
+                children.put(entry.getKey().toString(), (Boolean) entry.getValue());
+            } else if ((entry.getValue() instanceof Map)) {
+                try {
+                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
+                    children.put(perm.getName(), Boolean.TRUE);
+
+                    if (output != null) {
+                        output.add(perm);
+                    }
+                } catch (Throwable ex) {
+                    throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
+                }
+            } else {
+                throw new IllegalArgumentException("Child '" + entry.getKey().toString() + "' contains invalid value");
+            }
+        }
+
+        return children;
+    }
+
+    /**
      * Returns the unique fully qualified name of this Permission
      *
      * @return Fully qualified name
@@ -205,141 +341,4 @@
         perm.getChildren().put(getName(), value);
         perm.recalculatePermissibles();
     }
-
-    /**
-     * Loads a list of Permissions from a map of data, usually used from
-     * retrieval from a yaml file.
-     * <p>
-     * The data may contain a list of name:data, where the data contains the
-     * following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     * </ul>
-     *
-     * @param data Map of permissions
-     * @param error An error message to show if a permission is invalid.
-     * @param def Default permission value to use if missing
-     * @return Permission object
-     */
-    public static List<Permission> loadPermissions(Map<?, ?> data, String error, PermissionDefault def) {
-        List<Permission> result = new ArrayList<Permission>();
-
-        for (Map.Entry<?, ?> entry : data.entrySet()) {
-            try {
-                result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
-            } catch (Throwable ex) {
-                Bukkit.getServer().getLogger().log(Level.SEVERE, String.format(error, entry.getKey()), ex);
-            }
-        }
-
-        return result;
-    }
-
-    /**
-     * Loads a Permission from a map of data, usually used from retrieval from
-     * a yaml file.
-     * <p>
-     * The data may contain the following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     * </ul>
-     *
-     * @param name Name of the permission
-     * @param data Map of keys
-     * @return Permission object
-     */
-    public static Permission loadPermission(String name, Map<String, Object> data) {
-        return loadPermission(name, data, DEFAULT_PERMISSION, null);
-    }
-
-    /**
-     * Loads a Permission from a map of data, usually used from retrieval from
-     * a yaml file.
-     * <p>
-     * The data may contain the following keys:
-     * <ul>
-     * <li>default: Boolean true or false. If not specified, false.
-     * <li>children: {@code Map<String, Boolean>} of child permissions. If not
-     *     specified, empty list.
-     * <li>description: Short string containing a very small description of
-     *     this description. If not specified, empty string.
-     * </ul>
-     *
-     * @param name Name of the permission
-     * @param data Map of keys
-     * @param def Default permission value to use if not set
-     * @param output A list to append any created child-Permissions to, may be null
-     * @return Permission object
-     */
-    public static Permission loadPermission(String name, Map<?, ?> data, PermissionDefault def, List<Permission> output) {
-        Validate.notNull(name, "Name cannot be null");
-        Validate.notNull(data, "Data cannot be null");
-
-        String desc = null;
-        Map<String, Boolean> children = null;
-
-        if (data.get("default") != null) {
-            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
-            if (value != null) {
-                def = value;
-            } else {
-                throw new IllegalArgumentException("'default' key contained unknown value");
-            }
-        }
-
-        if (data.get("children") != null) {
-            Object childrenNode = data.get("children");
-            if (childrenNode instanceof Iterable) {
-                children = new LinkedHashMap<String, Boolean>();
-                for (Object child : (Iterable<?>) childrenNode) {
-                    if (child != null) {
-                        children.put(child.toString(), Boolean.TRUE);
-                    }
-                }
-            } else if (childrenNode instanceof Map) {
-                children = extractChildren((Map<?, ?>) childrenNode, name, def, output);
-            } else {
-                throw new IllegalArgumentException("'children' key is of wrong type");
-            }
-        }
-
-        if (data.get("description") != null) {
-            desc = data.get("description").toString();
-        }
-
-        return new Permission(name, desc, def, children);
-    }
-
-    private static Map<String, Boolean> extractChildren(Map<?, ?> input, String name, PermissionDefault def, List<Permission> output) {
-        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
-
-        for (Map.Entry<?, ?> entry : input.entrySet()) {
-            if ((entry.getValue() instanceof Boolean)) {
-                children.put(entry.getKey().toString(), (Boolean) entry.getValue());
-            } else if ((entry.getValue() instanceof Map)) {
-                try {
-                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
-                    children.put(perm.getName(), Boolean.TRUE);
-
-                    if (output != null) {
-                        output.add(perm);
-                    }
-                } catch (Throwable ex) {
-                    throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
-                }
-            } else {
-                throw new IllegalArgumentException("Child '" + entry.getKey().toString() + "' contains invalid value");
-            }
-        }
-
-        return children;
-    }
 }
