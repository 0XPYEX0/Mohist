--- ../src-base/minecraft/org/bukkit/permissions/PermissionDefault.java
+++ ../src-work/minecraft/org/bukkit/permissions/PermissionDefault.java
@@ -12,14 +12,33 @@
     OP("op", "isop", "operator", "isoperator", "admin", "isadmin"),
     NOT_OP("!op", "notop", "!operator", "notoperator", "!admin", "notadmin");
 
-    private final String[] names;
     private final static Map<String, PermissionDefault> lookup = new HashMap<String, PermissionDefault>();
 
+    static {
+        for (PermissionDefault value : values()) {
+            for (String name : value.names) {
+                lookup.put(name, value);
+            }
+        }
+    }
+
+    private final String[] names;
+
     private PermissionDefault(String... names) {
         this.names = names;
     }
 
     /**
+     * Looks up a PermissionDefault by name
+     *
+     * @param name Name of the default
+     * @return Specified value, or null if not found
+     */
+    public static PermissionDefault getByName(String name) {
+        return lookup.get(name.toLowerCase(java.util.Locale.ENGLISH).replaceAll("[^a-z!]", ""));
+    }
+
+    /**
      * Calculates the value of this PermissionDefault for the given operator
      * value
      *
@@ -28,39 +47,21 @@
      */
     public boolean getValue(boolean op) {
         switch (this) {
-        case TRUE:
-            return true;
-        case FALSE:
-            return false;
-        case OP:
-            return op;
-        case NOT_OP:
-            return !op;
-        default:
-            return false;
+            case TRUE:
+                return true;
+            case FALSE:
+                return false;
+            case OP:
+                return op;
+            case NOT_OP:
+                return !op;
+            default:
+                return false;
         }
     }
 
-    /**
-     * Looks up a PermissionDefault by name
-     *
-     * @param name Name of the default
-     * @return Specified value, or null if not found
-     */
-    public static PermissionDefault getByName(String name) {
-        return lookup.get(name.toLowerCase(java.util.Locale.ENGLISH).replaceAll("[^a-z!]", ""));
-    }
-
     @Override
     public String toString() {
         return names[0];
     }
-
-    static {
-        for (PermissionDefault value : values()) {
-            for (String name : value.names) {
-                lookup.put(name, value);
-            }
-        }
-    }
 }
