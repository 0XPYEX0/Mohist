--- ../src-base/minecraft/org/bukkit/Material.java
+++ ../src-work/minecraft/org/bukkit/Material.java
@@ -1,11 +1,13 @@
 package org.bukkit;
 
+import com.google.common.collect.Maps;
 import java.lang.reflect.Constructor;
 import java.util.Arrays;
 import java.util.Map;
-
+import net.minecraftforge.common.util.EnumHelper;
 import org.apache.commons.lang.Validate;
 import org.bukkit.map.MapView;
+import org.bukkit.material.Banner;
 import org.bukkit.material.Bed;
 import org.bukkit.material.Button;
 import org.bukkit.material.Cake;
@@ -34,6 +36,7 @@
 import org.bukkit.material.MonsterEggs;
 import org.bukkit.material.Mushroom;
 import org.bukkit.material.NetherWarts;
+import org.bukkit.material.Observer;
 import org.bukkit.material.PistonBaseMaterial;
 import org.bukkit.material.PistonExtensionMaterial;
 import org.bukkit.material.PoweredRail;
@@ -60,11 +63,6 @@
 import org.bukkit.material.WoodenStep;
 import org.bukkit.material.Wool;
 
-import com.google.common.collect.Maps;
-
-import org.bukkit.material.Banner;
-import org.bukkit.material.Observer;
-
 /**
  * An enum of all material IDs accepted by the official server and client
  */
@@ -535,57 +533,178 @@
     RECORD_9(2264, 1),
     RECORD_10(2265, 1),
     RECORD_11(2266, 1),
-    RECORD_12(2267, 1),
-    ;
+    RECORD_12(2267, 1),;
 
+    private static Material[] byId = new Material[32676];
+    private static Map<String, Material> BY_NAME = Maps.newHashMap(); // Cauldron - remove final
+
+    static {
+        for (Material material : values()) {
+            if (byId.length > material.id) {
+                byId[material.id] = material;
+            } else {
+                byId = Arrays.copyOfRange(byId, 0, material.id + 2);
+                byId[material.id] = material;
+            }
+            BY_NAME.put(material.name(), material);
+        }
+    }
+
     private final int id;
     private final Constructor<? extends MaterialData> ctor;
-    private static Material[] byId = new Material[383];
-    private final static Map<String, Material> BY_NAME = Maps.newHashMap();
     private final int maxStack;
     private final short durability;
 
-    private Material(final int id) {
+    Material(final int id) {
         this(id, 64);
     }
+    // Cauldron end
 
-    private Material(final int id, final int stack) {
+    Material(final int id, final int stack) {
         this(id, stack, MaterialData.class);
     }
 
-    private Material(final int id, final int stack, final int durability) {
+    Material(final int id, final int stack, final int durability) {
         this(id, stack, durability, MaterialData.class);
     }
 
-    private Material(final int id, final Class<? extends MaterialData> data) {
+    Material(final int id, final Class<? extends MaterialData> data) {
         this(id, 64, data);
     }
 
-    private Material(final int id, final int stack, final Class<? extends MaterialData> data) {
+    Material(final int id, final int stack, final Class<? extends MaterialData> data) {
         this(id, stack, 0, data);
     }
 
-    private Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {
+    Material(final int id, final int stack, final int durability, final Class<? extends MaterialData> data) {
         this.id = id;
         this.durability = (short) durability;
         this.maxStack = stack;
         // try to cache the constructor for this material
         try {
             this.ctor = data.getConstructor(int.class, byte.class);
-        } catch (NoSuchMethodException ex) {
+        } catch (NoSuchMethodException | SecurityException ex) {
             throw new AssertionError(ex);
-        } catch (SecurityException ex) {
-            throw new AssertionError(ex);
         }
     }
 
     /**
+     * Attempts to get the Material with the given ID
+     *
+     * @param id ID of the material to get
+     * @return Material if found, or null
+     * @deprecated Magic value
+     */
+
+    public static Material getMaterial(final int id) {
+        if (byId.length > id && id >= 0) {
+            return byId[id];
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Attempts to get the Material with the given name.
+     * <p>
+     * This is a normal lookup, names must be the precise name they are given
+     * in the enum.
+     *
+     * @param name Name of the material to get
+     * @return Material if found, or null
+     */
+    public static Material getMaterial(final String name) {
+        return BY_NAME.get(name);
+    }
+
+    /**
+     * Attempts to match the Material with the given name.
+     * <p>
+     * This is a match lookup; names will be converted to uppercase, then
+     * stripped of special characters in an attempt to format it like the
+     * enum.
+     * <p>
+     * Using this for match by ID is deprecated.
+     *
+     * @param name Name of the material to get
+     * @return Material if found, or null
+     */
+    public static Material matchMaterial(final String name) {
+        Validate.notNull(name, "Name cannot be null");
+
+        Material result = null;
+
+        try {
+            result = getMaterial(Integer.parseInt(name));
+        } catch (NumberFormatException ex) {
+        }
+
+        if (result == null) {
+            // Cauldron start - extract to normalizeName()
+            String filtered = normalizeName(name);
+            result = BY_NAME.get(filtered);
+            // Cauldron end
+        }
+
+        /*/ Cauldron start - Try the ore dictionary
+        if (result == null) {
+            BukkitOreDictionary dict = net.minecraftforge.cauldron.api.Cauldron.getOreDictionary();
+            OreDictionaryEntry entry = dict.getOreEntry(name);
+            if (entry != null) {
+                List<ItemStack> items = dict.getDefinitions(entry);
+                if (items.size() > 0) {
+                    // TODO check sanity on multiple item results
+                    ItemStack item = items.get(0);
+                    if (item.getDurability() == 0 || item.getDurability() == Short.MAX_VALUE) {
+                        result = item.getType();
+                    } else {
+                        // bad! we have an item with data!
+                    }
+                }
+            }
+        }
+        // Cauldron end
+         */
+
+        return result;
+    }
+
+    // use a normalize() function to ensure it is accessible after a round-trip
+    public static String normalizeName(String name) {
+        return name.toUpperCase(java.util.Locale.ENGLISH).replaceAll("(:|\\s)", "_").replaceAll("\\W", "");
+    }
+
+    public static Material addMaterial(int id, int limit, String name) {
+        if (byId[id] == null) {
+            String materialName = normalizeName(name);
+            Material material = EnumHelper.addEnum(Material.class, materialName, new Class[]{Integer.TYPE, Integer.TYPE}, new Object[]{id, limit});
+            byId[id] = material;
+            BY_NAME.put(materialName, material);
+            BY_NAME.put("X" + material.id, material);
+            return material;
+        }
+        return null;
+    }
+
+    public static Material addMaterial(int id, String name) {
+        if (byId[id] == null) {
+            String materialName = normalizeName(name);
+            Material material = EnumHelper.addEnum(Material.class, materialName, new Class[]{Integer.TYPE}, new Object[]{id});
+            byId[id] = material;
+            BY_NAME.put(materialName, material);
+            BY_NAME.put("X" + material.id, material);
+            return material;
+        }
+        return null;
+    }
+
+    /**
      * Gets the item ID or block ID of this Material
      *
      * @return ID of this material
      * @deprecated Magic value
      */
-    @Deprecated
+
     public int getId() {
         return id;
     }
@@ -608,6 +727,8 @@
         return durability;
     }
 
+    /* ===============================  Cauldron START ============================= */
+
     /**
      * Gets the MaterialData class associated with this Material
      *
@@ -625,7 +746,7 @@
      * @return New MaterialData with the given data
      * @deprecated Magic value
      */
-    @Deprecated
+
     public MaterialData getNewData(final byte raw) {
         try {
             return ctor.newInstance(id, raw);
@@ -696,78 +817,6 @@
     }
 
     /**
-     * Attempts to get the Material with the given ID
-     *
-     * @param id ID of the material to get
-     * @return Material if found, or null
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public static Material getMaterial(final int id) {
-        if (byId.length > id && id >= 0) {
-            return byId[id];
-        } else {
-            return null;
-        }
-    }
-
-    /**
-     * Attempts to get the Material with the given name.
-     * <p>
-     * This is a normal lookup, names must be the precise name they are given
-     * in the enum.
-     *
-     * @param name Name of the material to get
-     * @return Material if found, or null
-     */
-    public static Material getMaterial(final String name) {
-        return BY_NAME.get(name);
-    }
-
-    /**
-     * Attempts to match the Material with the given name.
-     * <p>
-     * This is a match lookup; names will be converted to uppercase, then
-     * stripped of special characters in an attempt to format it like the
-     * enum.
-     * <p>
-     * Using this for match by ID is deprecated.
-     *
-     * @param name Name of the material to get
-     * @return Material if found, or null
-     */
-    public static Material matchMaterial(final String name) {
-        Validate.notNull(name, "Name cannot be null");
-
-        Material result = null;
-
-        try {
-            result = getMaterial(Integer.parseInt(name));
-        } catch (NumberFormatException ex) {}
-
-        if (result == null) {
-            String filtered = name.toUpperCase(java.util.Locale.ENGLISH);
-
-            filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
-            result = BY_NAME.get(filtered);
-        }
-
-        return result;
-    }
-
-    static {
-        for (Material material : values()) {
-            if (byId.length > material.id) {
-                byId[material.id] = material;
-            } else {
-                byId = Arrays.copyOfRange(byId, 0, material.id + 2);
-                byId[material.id] = material;
-            }
-            BY_NAME.put(material.name(), material);
-        }
-    }
-
-    /**
      * @return True if this material represents a playable music disk.
      */
     public boolean isRecord() {
