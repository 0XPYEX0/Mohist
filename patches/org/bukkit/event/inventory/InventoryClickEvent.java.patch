--- ../src-base/minecraft/org/bukkit/event/inventory/InventoryClickEvent.java
+++ ../src-work/minecraft/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -1,15 +1,15 @@
 package org.bukkit.event.inventory;
 
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryView;
+import org.bukkit.Location;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.inventory.InventoryType.SlotType;
-import org.bukkit.Location;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitScheduler;
 
 /**
  * This event is called when a player clicks a slot in an inventory.
@@ -40,23 +40,31 @@
  * InventoryClickEvent can be overwritten. To change these slots, this event
  * should be cancelled and all desired changes to the inventory applied.
  * Alternatively, scheduling a task using {@link BukkitScheduler#runTask(
- * Plugin, Runnable)}, which would execute the task on the next tick, would
+ *Plugin, Runnable)}, which would execute the task on the next tick, would
  * work as well.
  */
 public class InventoryClickEvent extends InventoryInteractEvent {
     private static final HandlerList handlers = new HandlerList();
     private final ClickType click;
     private final InventoryAction action;
+    private final Inventory clickedInventory;
     private SlotType slot_type;
     private int whichSlot;
     private int rawSlot;
     private ItemStack current = null;
     private int hotbarKey = -1;
 
-    public InventoryClickEvent(InventoryView view, SlotType type, int slot, ClickType click, InventoryAction action) {
+    public InventoryClickEvent(InventoryView view, InventoryType.SlotType type, int slot, ClickType click, InventoryAction action) {
         super(view);
         this.slot_type = type;
         this.rawSlot = slot;
+        if (slot < 0) {
+            this.clickedInventory = null;
+        } else if (view.getTopInventory() != null && slot < view.getTopInventory().getSize()) {
+            this.clickedInventory = view.getTopInventory();
+        } else {
+            this.clickedInventory = view.getBottomInventory();
+        }
         this.whichSlot = view.convertSlot(slot);
         this.click = click;
         this.action = action;
@@ -67,7 +75,19 @@
         this.hotbarKey = key;
     }
 
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
     /**
+     * Gets the inventory that was clicked, or null if outside of window
+     * @return The clicked inventory
+     */
+    public Inventory getClickedInventory() {
+        return clickedInventory;
+    }
+
+    /**
      * Gets the type of slot that was clicked.
      *
      * @return the slot type
@@ -86,6 +106,19 @@
     }
 
     /**
+     * Sets the item on the cursor.
+     *
+     * @param stack the new cursor item
+     * @deprecated This changes the ItemStack in their hand before any
+     *     calculations are applied to the Inventory, which has a tendency to
+     *     create inconsistencies between the Player and the server, and to
+     *     make unexpected changes in the behavior of the clicked Inventory.
+     */
+    public void setCursor(ItemStack stack) {
+        getView().setCursor(stack);
+    }
+
+    /**
      * Gets the ItemStack currently in the clicked slot.
      *
      * @return the item in the clicked
@@ -98,6 +131,19 @@
     }
 
     /**
+     * Sets the ItemStack currently in the clicked slot.
+     *
+     * @param stack the item to be placed in the current slot
+     */
+    public void setCurrentItem(ItemStack stack) {
+        if (slot_type == SlotType.OUTSIDE) {
+            current = stack;
+        } else {
+            getView().setItem(rawSlot, stack);
+        }
+    }
+
+    /**
      * Gets whether or not the ClickType for this event represents a right
      * click.
      *
@@ -131,33 +177,6 @@
     }
 
     /**
-     * Sets the item on the cursor.
-     *
-     * @param stack the new cursor item
-     * @deprecated This changes the ItemStack in their hand before any
-     *     calculations are applied to the Inventory, which has a tendency to
-     *     create inconsistencies between the Player and the server, and to
-     *     make unexpected changes in the behavior of the clicked Inventory.
-     */
-    @Deprecated
-    public void setCursor(ItemStack stack) {
-        getView().setCursor(stack);
-    }
-
-    /**
-     * Sets the ItemStack currently in the clicked slot.
-     *
-     * @param stack the item to be placed in the current slot
-     */
-    public void setCurrentItem(ItemStack stack) {
-        if (slot_type == SlotType.OUTSIDE) {
-            current = stack;
-        } else {
-            getView().setItem(rawSlot, stack);
-        }
-    }
-
-    /**
      * The slot number that was clicked, ready for passing to
      * {@link Inventory#getItem(int)}. Note that there may be two slots with
      * the same slot number, since a view links two different inventories.
@@ -217,8 +236,4 @@
     public HandlerList getHandlers() {
         return handlers;
     }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
 }
