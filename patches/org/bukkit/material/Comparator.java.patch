--- ../src-base/minecraft/org/bukkit/material/Comparator.java
+++ ../src-work/minecraft/org/bukkit/material/Comparator.java
@@ -63,7 +63,7 @@
      * @param type the raw type id
      * @deprecated Magic value
      */
-    @Deprecated
+
     public Comparator(int type) {
         super(type);
     }
@@ -77,7 +77,7 @@
      * @param data the raw data value
      * @deprecated Magic value
      */
-    @Deprecated
+
     public Comparator(int type, byte data) {
         super(type, data);
     }
@@ -87,27 +87,27 @@
      * @param data the raw data value
      * @deprecated Magic value
      */
-    @Deprecated
+
     public Comparator(Material type, byte data) {
         super(type, data);
     }
 
     /**
-     * Sets whether the comparator is in subtraction mode.
+     * Checks whether the comparator is in subtraction mode
      *
-     * @param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation
+     * @return True if the comparator is in subtraction mode, false if normal comparator operation
      */
-    public void setSubtractionMode(boolean isSubtraction) {
-        setData((byte) (getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
+    public boolean isSubtractionMode() {
+        return (getData() & 0x4) != 0;
     }
 
     /**
-     * Checks whether the comparator is in subtraction mode
+     * Sets whether the comparator is in subtraction mode.
      *
-     * @return True if the comparator is in subtraction mode, false if normal comparator operation
+     * @param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation
      */
-    public boolean isSubtractionMode() {
-        return (getData() & 0x4) != 0;
+    public void setSubtractionMode(boolean isSubtraction) {
+        setData((byte) (getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
     }
 
     /**
@@ -122,21 +122,21 @@
         int data = getData() & 0xC;
 
         switch (face) {
-        case EAST:
-            data |= 0x1;
-            break;
+            case EAST:
+                data |= 0x1;
+                break;
 
-        case SOUTH:
-            data |= 0x2;
-            break;
+            case SOUTH:
+                data |= 0x2;
+                break;
 
-        case WEST:
-            data |= 0x3;
-            break;
+            case WEST:
+                data |= 0x3;
+                break;
 
-        case NORTH:
-        default:
-            data |= 0x0;
+            case NORTH:
+            default:
+                data |= 0x0;
         }
 
         setData((byte) data);
@@ -154,18 +154,18 @@
         byte data = (byte) (getData() & 0x3);
 
         switch (data) {
-        case 0x0:
-        default:
-            return BlockFace.NORTH;
+            case 0x0:
+            default:
+                return BlockFace.NORTH;
 
-        case 0x1:
-            return BlockFace.EAST;
+            case 0x1:
+                return BlockFace.EAST;
 
-        case 0x2:
-            return BlockFace.SOUTH;
+            case 0x2:
+                return BlockFace.SOUTH;
 
-        case 0x3:
-            return BlockFace.WEST;
+            case 0x3:
+                return BlockFace.WEST;
         }
     }
 
