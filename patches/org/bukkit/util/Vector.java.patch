--- ../src-base/minecraft/org/bukkit/util/Vector.java
+++ ../src-work/minecraft/org/bukkit/util/Vector.java
@@ -17,14 +17,11 @@
 @SerializableAs("Vector")
 public class Vector implements Cloneable, ConfigurationSerializable {
     private static final long serialVersionUID = -2657651106777219169L;
-
-    private static Random random = new Random();
-
     /**
      * Threshold for fuzzy equals().
      */
     private static final double epsilon = 0.000001;
-
+    private static Random random = new Random();
     protected double x;
     protected double y;
     protected double z;
@@ -78,6 +75,65 @@
     }
 
     /**
+     * Get the threshold used for equals().
+     *
+     * @return The epsilon.
+     */
+    public static double getEpsilon() {
+        return epsilon;
+    }
+
+    /**
+     * Gets the minimum components of two vectors.
+     *
+     * @param v1 The first vector.
+     * @param v2 The second vector.
+     * @return minimum
+     */
+    public static Vector getMinimum(Vector v1, Vector v2) {
+        return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
+    }
+
+    /**
+     * Gets the maximum components of two vectors.
+     *
+     * @param v1 The first vector.
+     * @param v2 The second vector.
+     * @return maximum
+     */
+    public static Vector getMaximum(Vector v1, Vector v2) {
+        return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
+    }
+
+    /**
+     * Gets a random vector with components having a random value between 0
+     * and 1.
+     *
+     * @return A random vector.
+     */
+    public static Vector getRandom() {
+        return new Vector(random.nextDouble(), random.nextDouble(), random.nextDouble());
+    }
+
+    public static Vector deserialize(Map<String, Object> args) {
+        double x = 0;
+        double y = 0;
+        double z = 0;
+
+        if (args.containsKey("x")) {
+            x = (Double) args.get("x");
+        }
+        if (args.containsKey("y")) {
+            y = (Double) args.get("y");
+        }
+        if (args.containsKey("z")) {
+            z = (Double) args.get("z");
+        }
+
+        return new Vector(x, y, z);
+    }
+
+    /**
      * Adds a vector to this one
      *
      * @param vec The other vector
@@ -383,6 +439,17 @@
     }
 
     /**
+     * Set the X component.
+     *
+     * @param x The new X component.
+     * @return This vector.
+     */
+    public Vector setX(float x) {
+        this.x = x;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the X component, indicating the block that
      * this vector is contained with.
      *
@@ -402,6 +469,17 @@
     }
 
     /**
+     * Set the Y component.
+     *
+     * @param y The new Y component.
+     * @return This vector.
+     */
+    public Vector setY(float y) {
+        this.y = y;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the Y component, indicating the block that
      * this vector is contained with.
      *
@@ -421,6 +499,17 @@
     }
 
     /**
+     * Set the Z component.
+     *
+     * @param z The new Z component.
+     * @return This vector.
+     */
+    public Vector setZ(float z) {
+        this.z = z;
+        return this;
+    }
+
+    /**
      * Gets the floored value of the Z component, indicating the block that
      * this vector is contained with.
      *
@@ -453,17 +542,6 @@
     }
 
     /**
-     * Set the X component.
-     *
-     * @param x The new X component.
-     * @return This vector.
-     */
-    public Vector setX(float x) {
-        this.x = x;
-        return this;
-    }
-
-    /**
      * Set the Y component.
      *
      * @param y The new Y component.
@@ -486,17 +564,6 @@
     }
 
     /**
-     * Set the Y component.
-     *
-     * @param y The new Y component.
-     * @return This vector.
-     */
-    public Vector setY(float y) {
-        this.y = y;
-        return this;
-    }
-
-    /**
      * Set the Z component.
      *
      * @param z The new Z component.
@@ -519,17 +586,6 @@
     }
 
     /**
-     * Set the Z component.
-     *
-     * @param z The new Z component.
-     * @return This vector.
-     */
-    public Vector setZ(float z) {
-        this.z = z;
-        return this;
-    }
-
-    /**
      * Checks to see if two objects are equal.
      * <p>
      * Only two Vectors can ever return true. This method uses a fuzzy match
@@ -626,47 +682,6 @@
         NumberConversions.checkFinite(z, "z not finite");
     }
 
-    /**
-     * Get the threshold used for equals().
-     *
-     * @return The epsilon.
-     */
-    public static double getEpsilon() {
-        return epsilon;
-    }
-
-    /**
-     * Gets the minimum components of two vectors.
-     *
-     * @param v1 The first vector.
-     * @param v2 The second vector.
-     * @return minimum
-     */
-    public static Vector getMinimum(Vector v1, Vector v2) {
-        return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
-    }
-
-    /**
-     * Gets the maximum components of two vectors.
-     *
-     * @param v1 The first vector.
-     * @param v2 The second vector.
-     * @return maximum
-     */
-    public static Vector getMaximum(Vector v1, Vector v2) {
-        return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
-    }
-
-    /**
-     * Gets a random vector with components having a random value between 0
-     * and 1.
-     *
-     * @return A random vector.
-     */
-    public static Vector getRandom() {
-        return new Vector(random.nextDouble(), random.nextDouble(), random.nextDouble());
-    }
-
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
@@ -676,22 +691,4 @@
 
         return result;
     }
-
-    public static Vector deserialize(Map<String, Object> args) {
-        double x = 0;
-        double y = 0;
-        double z = 0;
-
-        if (args.containsKey("x")) {
-            x = (Double) args.get("x");
-        }
-        if (args.containsKey("y")) {
-            y = (Double) args.get("y");
-        }
-        if (args.containsKey("z")) {
-            z = (Double) args.get("z");
-        }
-
-        return new Vector(x, y, z);
-    }
 }
