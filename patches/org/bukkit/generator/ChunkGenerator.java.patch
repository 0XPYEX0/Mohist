--- ../src-base/minecraft/org/bukkit/generator/ChunkGenerator.java
+++ ../src-work/minecraft/org/bukkit/generator/ChunkGenerator.java
@@ -19,34 +19,6 @@
 public abstract class ChunkGenerator {
 
     /**
-     * Interface to biome section for chunk to be generated: initialized with
-     * default values for world type and seed.
-     * <p>
-     * Custom generator is free to access and tailor values during
-     * generateBlockSections() or generateExtBlockSections().
-     */
-    public interface BiomeGrid {
-
-        /**
-         * Get biome at x, z within chunk being generated
-         *
-         * @param x - 0-15
-         * @param z - 0-15
-         * @return Biome value
-         */
-        Biome getBiome(int x, int z);
-
-        /**
-         * Set biome at x, z within chunk being generated
-         *
-         * @param x - 0-15
-         * @param z - 0-15
-         * @param bio - Biome value
-         */
-        void setBiome(int x, int z, Biome bio);
-    }
-    @Deprecated
-    /**
      * Shapes the chunk for the given coordinates.
      * <p>
      * This method should return a byte[32768] in the following format:
@@ -158,7 +130,6 @@
      *     generator
      * @deprecated Magic value
      */
-    @Deprecated
     public short[][] generateExtBlockSections(World world, Random random, int x, int z, BiomeGrid biomes) {
         return null; // Default - returns null, which drives call to generateBlockSections()
     }
@@ -216,14 +187,13 @@
      *     generator
      * @deprecated Magic value
      */
-    @Deprecated
     public byte[][] generateBlockSections(World world, Random random, int x, int z, BiomeGrid biomes) {
         return null; // Default - returns null, which drives call to generate()
     }
 
     /**
      * Shapes the chunk for the given coordinates.
-     * 
+     *
      * This method must return a ChunkData.
      * <p>
      * Notes:
@@ -235,7 +205,7 @@
      * been returned.
      * <p>
      * This method <b>must</b> return a ChunkData returned by {@link ChunkGenerator#createChunkData(org.bukkit.World)}
-     * 
+     *
      * @param world The world this chunk will be used for
      * @param random The random generator to use
      * @param x The X-coordinate of the chunk
@@ -270,13 +240,13 @@
         Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
         switch (world.getEnvironment()) {
-        case NETHER:
-            return true;
-        case THE_END:
-            return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
-        case NORMAL:
-        default:
-            return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
+            case NETHER:
+                return true;
+            case THE_END:
+                return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
+            case NORMAL:
+            default:
+                return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
         }
     }
 
@@ -306,14 +276,42 @@
     }
 
     /**
+     * Interface to biome section for chunk to be generated: initialized with
+     * default values for world type and seed.
+     * <p>
+     * Custom generator is free to access and tailor values during
+     * generateBlockSections() or generateExtBlockSections().
+     */
+    public interface BiomeGrid {
+
+        /**
+         * Get biome at x, z within chunk being generated
+         *
+         * @param x - 0-15
+         * @param z - 0-15
+         * @return Biome value
+         */
+        Biome getBiome(int x, int z);
+
+        /**
+         * Set biome at x, z within chunk being generated
+         *
+         * @param x - 0-15
+         * @param z - 0-15
+         * @param bio - Biome value
+         */
+        void setBiome(int x, int z, Biome bio);
+    }
+
+    /**
      * Data for a Chunk.
      */
     public static interface ChunkData {
         /**
          * Get the maximum height for the chunk.
-         * 
+         *
          * Setting blocks at or above this height will do nothing.
-         * 
+         *
          * @return the maximum height
          */
         public int getMaxHeight();
@@ -341,7 +339,7 @@
          * @param material the type to set the block to
          */
         public void setBlock(int x, int y, int z, MaterialData material);
-        
+
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
          * to xMax, yMax, zMax (exclusive) to material.
@@ -357,7 +355,7 @@
          * @param material the type to set the blocks to
          */
         public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, Material material);
-        
+
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
          * to xMax, yMax, zMax (exclusive) to material.
@@ -373,7 +371,7 @@
          * @param material the type to set the blocks to
          */
         public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, MaterialData material);
-        
+
         /**
          * Get the type of the block at x, y, z.
          *
@@ -385,7 +383,7 @@
          * @return the type of the block or Material.AIR if x, y or z are outside the chunk's bounds
          */
         public Material getType(int x, int y, int z);
-        
+
         /**
          * Get the type and data of the block at x, y ,z.
          *
@@ -397,7 +395,7 @@
          * @return the type and data of the block or the MaterialData for air if x, y or z are outside the chunk's bounds
          */
         public MaterialData getTypeAndData(int x, int y, int z);
-        
+
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
          * to xMax, yMax, zMax (exclusive) to block id.
@@ -413,9 +411,8 @@
          * @param blockId the block id to set the blocks to
          * @deprecated Uses magic values.
          */
-        @Deprecated
         public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, int blockId);
-        
+
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
          * to xMax, yMax, zMax (exclusive) to block id and data.
@@ -432,9 +429,8 @@
          * @param data the block data to set the blocks to
          * @deprecated Uses magic values.
          */
-        @Deprecated
         public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, int blockId, int data);
-        
+
         /**
          * Set the block at x,y,z in the chunk data to blockId.
          *
@@ -446,9 +442,8 @@
          * @param blockId the blockId to set the block to
          * @deprecated Uses magic values
          */
-        @Deprecated
         public void setBlock(int x, int y, int z, int blockId);
-        
+
         /**
          * Set the block at x,y,z in the chunk data to blockId.
          *
@@ -461,9 +456,8 @@
          * @param data the block data to set the block to
          * @deprecated Uses magic values
          */
-        @Deprecated
         public void setBlock(int x, int y, int z, int blockId, byte data);
-        
+
         /**
          * Get the blockId at x,y,z in the chunk data.
          *
@@ -475,9 +469,8 @@
          * @return the block id or 0 if x, y or z are outside the chunk's bounds
          * @deprecated Uses magic values
          */
-        @Deprecated
         public int getTypeId(int x, int y, int z);
-        
+
         /**
          * Get the block data at x,y,z in the chunk data.
          *
@@ -489,7 +482,6 @@
          * @return the block data value or air if x, y or z are outside the chunk's bounds
          * @deprecated Uses magic values
          */
-        @Deprecated
         public byte getData(int x, int y, int z);
     }
 }
