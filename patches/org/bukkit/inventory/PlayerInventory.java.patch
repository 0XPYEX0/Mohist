--- ../src-base/minecraft/org/bukkit/inventory/PlayerInventory.java
+++ ../src-work/minecraft/org/bukkit/inventory/PlayerInventory.java
@@ -15,6 +15,13 @@
     public ItemStack[] getArmorContents();
 
     /**
+     * Put the given ItemStacks into the armor slots
+     *
+     * @param items The ItemStacks to use as armour
+     */
+    public void setArmorContents(ItemStack[] items);
+
+    /**
      * Get all additional ItemStacks stored in this inventory.
      * <br>
      * NB: What defines an extra slot is up to the implementation, however it
@@ -26,6 +33,15 @@
     public ItemStack[] getExtraContents();
 
     /**
+     * Put the given ItemStacks into the extra slots
+     * <br>
+     * See {@link #getExtraContents()} for an explanation of extra slots.
+     *
+     * @param items The ItemStacks to use as extra
+     */
+    public void setExtraContents(ItemStack[] items);
+
+    /**
      * Return the ItemStack from the helmet slot
      *
      * @return The ItemStack in the helmet slot
@@ -33,6 +49,14 @@
     public ItemStack getHelmet();
 
     /**
+     * Put the given ItemStack into the helmet slot. This does not check if
+     * the ItemStack is a helmet
+     *
+     * @param helmet The ItemStack to use as helmet
+     */
+    public void setHelmet(ItemStack helmet);
+
+    /**
      * Return the ItemStack from the chestplate slot
      *
      * @return The ItemStack in the chestplate slot
@@ -40,6 +64,14 @@
     public ItemStack getChestplate();
 
     /**
+     * Put the given ItemStack into the chestplate slot. This does not check
+     * if the ItemStack is a chestplate
+     *
+     * @param chestplate The ItemStack to use as chestplate
+     */
+    public void setChestplate(ItemStack chestplate);
+
+    /**
      * Return the ItemStack from the leg slot
      *
      * @return The ItemStack in the leg slot
@@ -47,6 +79,14 @@
     public ItemStack getLeggings();
 
     /**
+     * Put the given ItemStack into the leg slot. This does not check if the
+     * ItemStack is a pair of leggings
+     *
+     * @param leggings The ItemStack to use as leggings
+     */
+    public void setLeggings(ItemStack leggings);
+
+    /**
      * Return the ItemStack from the boots slot
      *
      * @return The ItemStack in the boots slot
@@ -54,6 +94,14 @@
     public ItemStack getBoots();
 
     /**
+     * Put the given ItemStack into the boots slot. This does not check if the
+     * ItemStack is a boots
+     *
+     * @param boots The ItemStack to use as boots
+     */
+    public void setBoots(ItemStack boots);
+
+    /**
      * Stores the ItemStack at the given index of the inventory.
      * <p>
      * Indexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top
@@ -78,54 +126,6 @@
     public void setItem(int index, ItemStack item);
 
     /**
-     * Put the given ItemStacks into the armor slots
-     *
-     * @param items The ItemStacks to use as armour
-     */
-    public void setArmorContents(ItemStack[] items);
-
-    /**
-     * Put the given ItemStacks into the extra slots
-     * <br>
-     * See {@link #getExtraContents()} for an explanation of extra slots.
-     *
-     * @param items The ItemStacks to use as extra
-     */
-    public void setExtraContents(ItemStack[] items);
-
-    /**
-     * Put the given ItemStack into the helmet slot. This does not check if
-     * the ItemStack is a helmet
-     *
-     * @param helmet The ItemStack to use as helmet
-     */
-    public void setHelmet(ItemStack helmet);
-
-    /**
-     * Put the given ItemStack into the chestplate slot. This does not check
-     * if the ItemStack is a chestplate
-     *
-     * @param chestplate The ItemStack to use as chestplate
-     */
-    public void setChestplate(ItemStack chestplate);
-
-    /**
-     * Put the given ItemStack into the leg slot. This does not check if the
-     * ItemStack is a pair of leggings
-     *
-     * @param leggings The ItemStack to use as leggings
-     */
-    public void setLeggings(ItemStack leggings);
-
-    /**
-     * Put the given ItemStack into the boots slot. This does not check if the
-     * ItemStack is a boots
-     *
-     * @param boots The ItemStack to use as boots
-     */
-    public void setBoots(ItemStack boots);
-
-    /**
      * Gets a copy of the item the player is currently holding
      * in their main hand.
      *
