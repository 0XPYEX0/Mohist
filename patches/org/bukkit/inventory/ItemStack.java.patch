--- ../src-base/minecraft/org/bukkit/inventory/ItemStack.java
+++ ../src-work/minecraft/org/bukkit/inventory/ItemStack.java
@@ -3,7 +3,6 @@
 import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -24,7 +23,8 @@
     private ItemMeta meta;
 
     @Utility
-    protected ItemStack() {}
+    protected ItemStack() {
+    }
 
     /**
      * Defaults stack size to 1, with no extra data
@@ -32,7 +32,6 @@
      * @param type item material id
      * @deprecated Magic value
      */
-    @Deprecated
     public ItemStack(final int type) {
         this(type, 1);
     }
@@ -53,7 +52,6 @@
      * @param amount stack size
      * @deprecated Magic value
      */
-    @Deprecated
     public ItemStack(final int type, final int amount) {
         this(type, amount, (short) 0);
     }
@@ -76,7 +74,6 @@
      * @param damage durability / damage
      * @deprecated Magic value
      */
-    @Deprecated
     public ItemStack(final int type, final int amount, final short damage) {
         this.type = type;
         this.amount = amount;
@@ -101,7 +98,6 @@
      * @param data the data value or null
      * @deprecated this method uses an ambiguous data byte object
      */
-    @Deprecated
     public ItemStack(final int type, final int amount, final short damage, final Byte data) {
         this.type = type;
         this.amount = amount;
@@ -119,7 +115,8 @@
      * @param data the data value or null
      * @deprecated this method uses an ambiguous data byte object
      */
-    @Deprecated
+
+
     public ItemStack(final Material type, final int amount, final short damage, final Byte data) {
         this(type.getId(), amount, damage, data);
     }
@@ -142,7 +139,58 @@
         }
     }
 
+    private static Material getType0(int id) {
+        Material material = Material.getMaterial(id);
+        return material == null ? Material.AIR : material;
+    }
+
     /**
+     * Required method for configuration serialization
+     *
+     * @param args map to deserialize
+     * @return deserialized item stack
+     * @see ConfigurationSerializable
+     */
+    public static ItemStack deserialize(Map<String, Object> args) {
+        Material type = Material.getMaterial((String) args.get("type"));
+        short damage = 0;
+        int amount = 1;
+
+        if (args.containsKey("damage")) {
+            damage = ((Number) args.get("damage")).shortValue();
+        }
+
+        if (args.containsKey("amount")) {
+            amount = ((Number) args.get("amount")).intValue();
+        }
+
+        ItemStack result = new ItemStack(type, amount, damage);
+
+        if (args.containsKey("enchantments")) { // Backward compatiblity, @deprecated
+            Object raw = args.get("enchantments");
+
+            if (raw instanceof Map) {
+                Map<?, ?> map = (Map<?, ?>) raw;
+
+                for (Map.Entry<?, ?> entry : map.entrySet()) {
+                    Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
+
+                    if ((enchantment != null) && (entry.getValue() instanceof Integer)) {
+                        result.addUnsafeEnchantment(enchantment, (Integer) entry.getValue());
+                    }
+                }
+            }
+        } else if (args.containsKey("meta")) { // We cannot and will not have meta when enchantments (pre-ItemMeta) exist
+            Object raw = args.get("meta");
+            if (raw instanceof ItemMeta) {
+                result.setItemMeta((ItemMeta) raw);
+            }
+        }
+
+        return result;
+    }
+
+    /**
      * Gets the type of this item
      *
      * @return Type of the items in this stack
@@ -152,15 +200,6 @@
         return getType0(getTypeId());
     }
 
-    private Material getType0() {
-        return getType0(this.type);
-    }
-
-    private static Material getType0(int id) {
-        Material material = Material.getMaterial(id);
-        return material == null ? Material.AIR : material;
-    }
-
     /**
      * Sets the type of this item
      * <p>
@@ -174,13 +213,17 @@
         setTypeId(type.getId());
     }
 
+    private Material getType0() {
+        return getType0(this.type);
+    }
+
     /**
      * Gets the type id of this item
      *
      * @return Type Id of the items in this stack
      * @deprecated Magic value
      */
-    @Deprecated
+
     public int getTypeId() {
         return type;
     }
@@ -193,7 +236,7 @@
      * @param type New type id to set the items in this stack to
      * @deprecated Magic value
      */
-    @Deprecated
+
     public void setTypeId(int type) {
         this.type = type;
         if (this.meta != null) {
@@ -254,21 +297,21 @@
     }
 
     /**
-     * Sets the durability of this item
+     * Gets the durability of this item
      *
-     * @param durability Durability of this item
+     * @return Durability of this item
      */
-    public void setDurability(final short durability) {
-        this.durability = durability;
+    public short getDurability() {
+        return durability;
     }
 
     /**
-     * Gets the durability of this item
+     * Sets the durability of this item
      *
-     * @return Durability of this item
+     * @param durability Durability of this item
      */
-    public short getDurability() {
-        return durability;
+    public void setDurability(final short durability) {
+        this.durability = durability;
     }
 
     /**
@@ -514,52 +557,6 @@
     }
 
     /**
-     * Required method for configuration serialization
-     *
-     * @param args map to deserialize
-     * @return deserialized item stack
-     * @see ConfigurationSerializable
-     */
-    public static ItemStack deserialize(Map<String, Object> args) {
-        Material type = Material.getMaterial((String) args.get("type"));
-        short damage = 0;
-        int amount = 1;
-
-        if (args.containsKey("damage")) {
-            damage = ((Number) args.get("damage")).shortValue();
-        }
-
-        if (args.containsKey("amount")) {
-            amount = ((Number) args.get("amount")).intValue();
-        }
-
-        ItemStack result = new ItemStack(type, amount, damage);
-
-        if (args.containsKey("enchantments")) { // Backward compatiblity, @deprecated
-            Object raw = args.get("enchantments");
-
-            if (raw instanceof Map) {
-                Map<?, ?> map = (Map<?, ?>) raw;
-
-                for (Map.Entry<?, ?> entry : map.entrySet()) {
-                    Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
-
-                    if ((enchantment != null) && (entry.getValue() instanceof Integer)) {
-                        result.addUnsafeEnchantment(enchantment, (Integer) entry.getValue());
-                    }
-                }
-            }
-        } else if (args.containsKey("meta")) { // We cannot and will not have meta when enchantments (pre-ItemMeta) exist
-            Object raw = args.get("meta");
-            if (raw instanceof ItemMeta) {
-                result.setItemMeta((ItemMeta) raw);
-            }
-        }
-
-        return result;
-    }
-
-    /**
      * Get a copy of this ItemStack's {@link ItemMeta}.
      *
      * @return a copy of the current ItemStack's ItemData
