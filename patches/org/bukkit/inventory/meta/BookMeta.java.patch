--- ../src-base/minecraft/org/bukkit/inventory/meta/BookMeta.java
+++ ../src-work/minecraft/org/bukkit/inventory/meta/BookMeta.java
@@ -1,7 +1,7 @@
 package org.bukkit.inventory.meta;
 
 import java.util.List;
-
+import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Material;
 
 /**
@@ -11,28 +11,6 @@
 public interface BookMeta extends ItemMeta {
 
     /**
-     * Represents the generation (or level of copying) of a written book
-     */
-    enum Generation {
-        /**
-         * Book written into a book-and-quill. Can be copied. (Default value)
-         */
-        ORIGINAL,
-        /**
-         * Book that was copied from an original. Can be copied.
-         */
-        COPY_OF_ORIGINAL,
-        /**
-         * Book that was copied from a copy of an original. Can't be copied.
-         */
-        COPY_OF_COPY,
-        /**
-         * Unused; unobtainable by players. Can't be copied.
-         */
-        TATTERED;
-    }
-
-    /**
      * Checks for the existence of a title in the book.
      *
      * @return true if the book has a title
@@ -145,17 +123,17 @@
      * Clears the existing book pages, and sets the book to use the provided
      * pages. Maximum 50 pages with 256 characters per page.
      *
-     * @param pages A list of pages to set the book to use
+     * @param pages A list of strings, each being a page
      */
-    void setPages(List<String> pages);
+    void setPages(String... pages);
 
     /**
      * Clears the existing book pages, and sets the book to use the provided
      * pages. Maximum 50 pages with 256 characters per page.
      *
-     * @param pages A list of strings, each being a page
+     * @param pages A list of pages to set the book to use
      */
-    void setPages(String... pages);
+    void setPages(List<String> pages);
 
     /**
      * Adds new pages to the end of the book. Up to a maximum of 50 pages with
@@ -173,4 +151,96 @@
     int getPageCount();
 
     BookMeta clone();
+
+    @Override
+    Spigot spigot();
+
+    /**
+     * Represents the generation (or level of copying) of a written book
+     */
+    enum Generation {
+        /**
+         * Book written into a book-and-quill. Can be copied. (Default value)
+         */
+        ORIGINAL,
+        /**
+         * Book that was copied from an original. Can be copied.
+         */
+        COPY_OF_ORIGINAL,
+        /**
+         * Book that was copied from a copy of an original. Can't be copied.
+         */
+        COPY_OF_COPY,
+        /**
+         * Unused; unobtainable by players. Can't be copied.
+         */
+        TATTERED;
+    }
+
+    // Spigot start
+    public class Spigot extends ItemMeta.Spigot {
+        /**
+         * Gets the specified page in the book. The given page must exist.
+         *
+         * @param page the page number to get
+         * @return the page from the book
+         */
+        public BaseComponent[] getPage(int page) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Sets the specified page in the book. Pages of the book must be
+         * contiguous.
+         * <p>
+         * The data can be up to 256 characters in length, additional characters
+         * are truncated.
+         *
+         * @param page the page number to set
+         * @param data the data to set for that page
+         */
+        public void setPage(int page, BaseComponent... data) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Gets all the pages in the book.
+         *
+         * @return list of all the pages in the book
+         */
+        public List<BaseComponent[]> getPages() {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Clears the existing book pages, and sets the book to use the provided
+         * pages. Maximum 50 pages with 256 characters per page.
+         *
+         * @param pages A list of component arrays, each being a page
+         */
+        public void setPages(BaseComponent[]... pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Clears the existing book pages, and sets the book to use the provided
+         * pages. Maximum 50 pages with 256 characters per page.
+         *
+         * @param pages A list of pages to set the book to use
+         */
+        public void setPages(List<BaseComponent[]> pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        /**
+         * Adds new pages to the end of the book. Up to a maximum of 50 pages
+         * with 256 characters per page.
+         *
+         * @param pages A list of component arrays, each being a page
+         */
+        public void addPage(BaseComponent[]... pages) {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    }
+    // Spigot end
 }
