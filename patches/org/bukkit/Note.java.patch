--- ../src-base/minecraft/org/bukkit/Note.java
+++ ../src-work/minecraft/org/bukkit/Note.java
@@ -1,122 +1,14 @@
 package org.bukkit;
 
+import com.google.common.collect.Maps;
 import java.util.Map;
-
 import org.apache.commons.lang.Validate;
 
-import com.google.common.collect.Maps;
-
 /**
  * A note class to store a specific note.
  */
 public class Note {
 
-    /**
-     * An enum holding tones.
-     */
-    public enum Tone {
-        G(0x1, true),
-        A(0x3, true),
-        B(0x5, false),
-        C(0x6, true),
-        D(0x8, true),
-        E(0xA, false),
-        F(0xB, true);
-
-        private final boolean sharpable;
-        private final byte id;
-
-        private static final Map<Byte, Note.Tone> BY_DATA = Maps.newHashMap();
-        /** The number of tones including sharped tones. */
-        public static final byte TONES_COUNT = 12;
-
-        private Tone(int id, boolean sharpable) {
-            this.id = (byte) (id % TONES_COUNT);
-            this.sharpable = sharpable;
-        }
-
-        /**
-         * Returns the not sharped id of this tone.
-         *
-         * @return the not sharped id of this tone.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public byte getId() {
-            return getId(false);
-        }
-
-        /**
-         * Returns the id of this tone. These method allows to return the
-         * sharped id of the tone. If the tone couldn't be sharped it always
-         * return the not sharped id of this tone.
-         *
-         * @param sharped Set to true to return the sharped id.
-         * @return the id of this tone.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public byte getId(boolean sharped) {
-            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
-
-            return (byte) (id % TONES_COUNT);
-        }
-
-        /**
-         * Returns if this tone could be sharped.
-         *
-         * @return if this tone could be sharped.
-         */
-        public boolean isSharpable() {
-            return sharpable;
-        }
-
-        /**
-         * Returns if this tone id is the sharped id of the tone.
-         *
-         * @param id the id of the tone.
-         * @return if the tone id is the sharped id of the tone.
-         * @throws IllegalArgumentException if neither the tone nor the
-         *     semitone have the id.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public boolean isSharped(byte id) {
-            if (id == getId(false)) {
-                return false;
-            } else if (id == getId(true)) {
-                return true;
-            } else {
-                // The id isn't matching to the tone!
-                throw new IllegalArgumentException("The id isn't matching to the tone.");
-            }
-        }
-
-        /**
-         * Returns the tone to id. Also returning the semitones.
-         *
-         * @param id the id of the tone.
-         * @return the tone to id.
-         * @deprecated Magic value
-         */
-        @Deprecated
-        public static Tone getById(byte id) {
-            return BY_DATA.get(id);
-        }
-
-        static {
-            for (Tone tone : values()) {
-                int id = tone.id % TONES_COUNT;
-                BY_DATA.put((byte) id, tone);
-
-                if (tone.isSharpable()) {
-                    id = (id + 1) % TONES_COUNT;
-                    BY_DATA.put((byte) id, tone);
-                }
-            }
-        }
-    }
-
     private final byte note;
 
     /**
@@ -210,7 +102,7 @@
      * @return the internal id of this note.
      * @deprecated Magic value
      */
-    @Deprecated
+
     public byte getId() {
         return note;
     }
@@ -257,15 +149,19 @@
 
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+        if (getClass() != obj.getClass()) {
             return false;
+        }
         Note other = (Note) obj;
-        if (note != other.note)
+        if (note != other.note) {
             return false;
+        }
         return true;
     }
 
@@ -273,4 +169,110 @@
     public String toString() {
         return "Note{" + getTone().toString() + (isSharped() ? "#" : "") + "}";
     }
+
+    /**
+     * An enum holding tones.
+     */
+    public enum Tone {
+        G(0x1, true),
+        A(0x3, true),
+        B(0x5, false),
+        C(0x6, true),
+        D(0x8, true),
+        E(0xA, false),
+        F(0xB, true);
+
+        /** The number of tones including sharped tones. */
+        public static final byte TONES_COUNT = 12;
+        private static final Map<Byte, Note.Tone> BY_DATA = Maps.newHashMap();
+
+        static {
+            for (Tone tone : values()) {
+                int id = tone.id % TONES_COUNT;
+                BY_DATA.put((byte) id, tone);
+
+                if (tone.isSharpable()) {
+                    id = (id + 1) % TONES_COUNT;
+                    BY_DATA.put((byte) id, tone);
+                }
+            }
+        }
+
+        private final boolean sharpable;
+        private final byte id;
+
+        private Tone(int id, boolean sharpable) {
+            this.id = (byte) (id % TONES_COUNT);
+            this.sharpable = sharpable;
+        }
+
+        /**
+         * Returns the tone to id. Also returning the semitones.
+         *
+         * @param id the id of the tone.
+         * @return the tone to id.
+         * @deprecated Magic value
+         */
+
+        public static Tone getById(byte id) {
+            return BY_DATA.get(id);
+        }
+
+        /**
+         * Returns the not sharped id of this tone.
+         *
+         * @return the not sharped id of this tone.
+         * @deprecated Magic value
+         */
+
+        public byte getId() {
+            return getId(false);
+        }
+
+        /**
+         * Returns the id of this tone. These method allows to return the
+         * sharped id of the tone. If the tone couldn't be sharped it always
+         * return the not sharped id of this tone.
+         *
+         * @param sharped Set to true to return the sharped id.
+         * @return the id of this tone.
+         * @deprecated Magic value
+         */
+
+        public byte getId(boolean sharped) {
+            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
+
+            return (byte) (id % TONES_COUNT);
+        }
+
+        /**
+         * Returns if this tone could be sharped.
+         *
+         * @return if this tone could be sharped.
+         */
+        public boolean isSharpable() {
+            return sharpable;
+        }
+
+        /**
+         * Returns if this tone id is the sharped id of the tone.
+         *
+         * @param id the id of the tone.
+         * @return if the tone id is the sharped id of the tone.
+         * @throws IllegalArgumentException if neither the tone nor the
+         *     semitone have the id.
+         * @deprecated Magic value
+         */
+
+        public boolean isSharped(byte id) {
+            if (id == getId(false)) {
+                return false;
+            } else if (id == getId(true)) {
+                return true;
+            } else {
+                // The id isn't matching to the tone!
+                throw new IllegalArgumentException("The id isn't matching to the tone.");
+            }
+        }
+    }
 }
