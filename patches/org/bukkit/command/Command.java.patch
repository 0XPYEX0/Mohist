--- ../src-base/minecraft/org/bukkit/command/Command.java
+++ ../src-work/minecraft/org/bukkit/command/Command.java
@@ -1,10 +1,10 @@
 package org.bukkit.command;
 
+import com.google.common.collect.ImmutableList;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
-
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -15,21 +15,20 @@
 import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
+import red.mohist.util.i18n.Message;
 
-import com.google.common.collect.ImmutableList;
-
 /**
  * Represents a Command, which executes various tasks upon user input
  */
 public abstract class Command {
+    protected String description = "";
+    protected String usageMessage;
     private String name;
     private String nextLabel;
     private String label;
     private List<String> aliases;
     private List<String> activeAliases;
     private CommandMap commandMap = null;
-    protected String description = "";
-    protected String usageMessage;
     private String permission;
     private String permissionMessage;
 
@@ -47,6 +46,49 @@
         this.activeAliases = new ArrayList<String>(aliases);
     }
 
+    public static void broadcastCommandMessage(CommandSender source, String message) {
+        broadcastCommandMessage(source, message, true);
+    }
+
+    public static void broadcastCommandMessage(CommandSender source, String message, boolean sendToSource) {
+        String result = source.getName() + ": " + message;
+
+        if (source instanceof BlockCommandSender) {
+            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
+
+            if (blockCommandSender.getBlock().getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
+                Bukkit.getConsoleSender().sendMessage(result);
+                return;
+            }
+        } else if (source instanceof CommandMinecart) {
+            CommandMinecart commandMinecart = (CommandMinecart) source;
+
+            if (commandMinecart.getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
+                Bukkit.getConsoleSender().sendMessage(result);
+                return;
+            }
+        }
+
+        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
+        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
+
+        if (sendToSource && !(source instanceof ConsoleCommandSender)) {
+            source.sendMessage(message);
+        }
+
+        for (Permissible user : users) {
+            if (user instanceof CommandSender && user.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE)) {
+                CommandSender target = (CommandSender) user;
+
+                if (target instanceof ConsoleCommandSender) {
+                    target.sendMessage(result);
+                } else if (target != source) {
+                    target.sendMessage(colored);
+                }
+            }
+        }
+    }
+
     /**
      * Executes the command, returning its success
      *
@@ -177,7 +219,7 @@
         }
 
         if (permissionMessage == null) {
-            target.sendMessage(ChatColor.RED + "I'm sorry, but you do not have permission to perform this command. Please contact the server administrators if you believe that this is in error.");
+            target.sendMessage(Message.getString("command.nopermission"));
         } else if (permissionMessage.length() != 0) {
             for (String line : permissionMessage.replace("<permission>", permission).split("\n")) {
                 target.sendMessage(line);
@@ -299,6 +341,23 @@
     }
 
     /**
+     * Sets the list of aliases to request on registration for this command.
+     * This is not effective outside of defining aliases in the {@link
+     * PluginDescriptionFile#getCommands()} (under the
+     * `<code>aliases</code>' node) is equivalent to this method.
+     *
+     * @param aliases aliases to register to this command
+     * @return this command object, for chaining
+     */
+    public Command setAliases(List<String> aliases) {
+        this.aliases = aliases;
+        if (!isRegistered()) {
+            this.activeAliases = new ArrayList<String>(aliases);
+        }
+        return this;
+    }
+
+    /**
      * Returns a message to be displayed on a failed permission check for this
      * command
      *
@@ -309,41 +368,27 @@
     }
 
     /**
-     * Gets a brief description of this command
+     * Sets the message sent when a permission check fails
      *
-     * @return Description of this command
+     * @param permissionMessage new permission message, null to indicate
+     *     default message, or an empty string to indicate no message
+     * @return this command object, for chaining
      */
-    public String getDescription() {
-        return description;
+    public Command setPermissionMessage(String permissionMessage) {
+        this.permissionMessage = permissionMessage;
+        return this;
     }
 
     /**
-     * Gets an example usage of this command
+     * Gets a brief description of this command
      *
-     * @return One or more example usages
+     * @return Description of this command
      */
-    public String getUsage() {
-        return usageMessage;
+    public String getDescription() {
+        return description;
     }
 
     /**
-     * Sets the list of aliases to request on registration for this command.
-     * This is not effective outside of defining aliases in the {@link
-     * PluginDescriptionFile#getCommands()} (under the
-     * `<code>aliases</code>' node) is equivalent to this method.
-     *
-     * @param aliases aliases to register to this command
-     * @return this command object, for chaining
-     */
-    public Command setAliases(List<String> aliases) {
-        this.aliases = aliases;
-        if (!isRegistered()) {
-            this.activeAliases = new ArrayList<String>(aliases);
-        }
-        return this;
-    }
-
-    /**
      * Sets a brief description of this command. Defining a description in the
      * {@link PluginDescriptionFile#getCommands()} (under the
      * `<code>description</code>' node) is equivalent to this method.
@@ -357,15 +402,12 @@
     }
 
     /**
-     * Sets the message sent when a permission check fails
+     * Gets an example usage of this command
      *
-     * @param permissionMessage new permission message, null to indicate
-     *     default message, or an empty string to indicate no message
-     * @return this command object, for chaining
+     * @return One or more example usages
      */
-    public Command setPermissionMessage(String permissionMessage) {
-        this.permissionMessage = permissionMessage;
-        return this;
+    public String getUsage() {
+        return usageMessage;
     }
 
     /**
@@ -379,49 +421,6 @@
         return this;
     }
 
-    public static void broadcastCommandMessage(CommandSender source, String message) {
-        broadcastCommandMessage(source, message, true);
-    }
-
-    public static void broadcastCommandMessage(CommandSender source, String message, boolean sendToSource) {
-        String result = source.getName() + ": " + message;
-
-        if (source instanceof BlockCommandSender) {
-            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
-
-            if (blockCommandSender.getBlock().getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
-                Bukkit.getConsoleSender().sendMessage(result);
-                return;
-            }
-        } else if (source instanceof CommandMinecart) {
-            CommandMinecart commandMinecart = (CommandMinecart) source;
-
-            if (commandMinecart.getWorld().getGameRuleValue("commandBlockOutput").equalsIgnoreCase("false")) {
-                Bukkit.getConsoleSender().sendMessage(result);
-                return;
-            }
-        }
-
-        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
-        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
-
-        if (sendToSource && !(source instanceof ConsoleCommandSender)) {
-            source.sendMessage(message);
-        }
-
-        for (Permissible user : users) {
-            if (user instanceof CommandSender && user.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE)) {
-                CommandSender target = (CommandSender) user;
-
-                if (target instanceof ConsoleCommandSender) {
-                    target.sendMessage(result);
-                } else if (target != source) {
-                    target.sendMessage(colored);
-                }
-            }
-        }
-    }
-
     @Override
     public String toString() {
         return getClass().getName() + '(' + name + ')';
