--- ../src-base/minecraft/org/bukkit/DyeColor.java
+++ ../src-work/minecraft/org/bukkit/DyeColor.java
@@ -1,9 +1,8 @@
 package org.bukkit;
 
+import com.google.common.collect.ImmutableMap;
 import java.util.Map;
 
-import com.google.common.collect.ImmutableMap;
-
 /**
  * All supported color values for dyes and cloth
  */
@@ -74,15 +73,33 @@
      */
     BLACK(0xF, 0x0, Color.fromRGB(0x1D1D21), Color.fromRGB(0x1E1B1B));
 
-    private final byte woolData;
-    private final byte dyeData;
-    private final Color color;
-    private final Color firework;
     private final static DyeColor[] BY_WOOL_DATA;
     private final static DyeColor[] BY_DYE_DATA;
     private final static Map<Color, DyeColor> BY_COLOR;
     private final static Map<Color, DyeColor> BY_FIREWORK;
 
+    static {
+        BY_WOOL_DATA = values();
+        BY_DYE_DATA = values();
+        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
+        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
+
+        for (DyeColor color : values()) {
+            BY_WOOL_DATA[color.woolData & 0xff] = color;
+            BY_DYE_DATA[color.dyeData & 0xff] = color;
+            byColor.put(color.getColor(), color);
+            byFirework.put(color.getFireworkColor(), color);
+        }
+
+        BY_COLOR = byColor.build();
+        BY_FIREWORK = byFirework.build();
+    }
+
+    private final byte woolData;
+    private final byte dyeData;
+    private final Color color;
+    private final Color firework;
+
     private DyeColor(final int woolData, final int dyeData, Color color, Color firework) {
         this.woolData = (byte) woolData;
         this.dyeData = (byte) dyeData;
@@ -91,48 +108,6 @@
     }
 
     /**
-     * Gets the associated wool data value representing this color.
-     *
-     * @return A byte containing the wool data value of this color
-     * @see #getDyeData()
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getWoolData() {
-        return woolData;
-    }
-
-    /**
-     * Gets the associated dye data value representing this color.
-     *
-     * @return A byte containing the dye data value of this color
-     * @see #getWoolData()
-     * @deprecated Magic value
-     */
-    @Deprecated
-    public byte getDyeData() {
-        return dyeData;
-    }
-
-    /**
-     * Gets the color that this dye represents.
-     *
-     * @return The {@link Color} that this dye represents
-     */
-    public Color getColor() {
-        return color;
-    }
-
-    /**
-     * Gets the firework color that this dye represents.
-     *
-     * @return The {@link Color} that this dye represents
-     */
-    public Color getFireworkColor() {
-        return firework;
-    }
-
-    /**
      * Gets the DyeColor with the given wool data value.
      *
      * @param data Wool data value to fetch
@@ -141,7 +116,7 @@
      * @see #getByDyeData(byte)
      * @deprecated Magic value
      */
-    @Deprecated
+
     public static DyeColor getByWoolData(final byte data) {
         int i = 0xff & data;
         if (i >= BY_WOOL_DATA.length) {
@@ -159,7 +134,7 @@
      * @see #getByWoolData(byte)
      * @deprecated Magic value
      */
-    @Deprecated
+
     public static DyeColor getByDyeData(final byte data) {
         int i = 0xff & data;
         if (i >= BY_DYE_DATA.length) {
@@ -190,20 +165,45 @@
         return BY_FIREWORK.get(color);
     }
 
-    static {
-        BY_WOOL_DATA = values();
-        BY_DYE_DATA = values();
-        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
-        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
+    /**
+     * Gets the associated wool data value representing this color.
+     *
+     * @return A byte containing the wool data value of this color
+     * @see #getDyeData()
+     * @deprecated Magic value
+     */
 
-        for (DyeColor color : values()) {
-            BY_WOOL_DATA[color.woolData & 0xff] = color;
-            BY_DYE_DATA[color.dyeData & 0xff] = color;
-            byColor.put(color.getColor(), color);
-            byFirework.put(color.getFireworkColor(), color);
-        }
+    public byte getWoolData() {
+        return woolData;
+    }
 
-        BY_COLOR = byColor.build();
-        BY_FIREWORK = byFirework.build();
+    /**
+     * Gets the associated dye data value representing this color.
+     *
+     * @return A byte containing the dye data value of this color
+     * @see #getWoolData()
+     * @deprecated Magic value
+     */
+
+    public byte getDyeData() {
+        return dyeData;
     }
+
+    /**
+     * Gets the color that this dye represents.
+     *
+     * @return The {@link Color} that this dye represents
+     */
+    public Color getColor() {
+        return color;
+    }
+
+    /**
+     * Gets the firework color that this dye represents.
+     *
+     * @return The {@link Color} that this dye represents
+     */
+    public Color getFireworkColor() {
+        return firework;
+    }
 }
